package notquitejava.syntax;

import notquitejava.ast.*;
import static notquitejava.ast.NQJ.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import frontend.SyntaxError;
import frontend.AstHelper;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;


class NotQuiteJavaParser;
   
// Parser code to change the way the parser reports errors (include
// line and column number of the error). 
parser code {:
    
    private Consumer<SyntaxError> onError;

    public void onError(Consumer<SyntaxError> onError) {
        this.onError = onError;
    }
    

    @Override
    public void syntax_error(Symbol info) {

        List<Integer> expectedTokens = expected_token_ids();
        
        int line, column;
        StringBuilder message = new StringBuilder("Unexpected token ");
        if (info instanceof ComplexSymbol) {
            ComplexSymbol s = (ComplexSymbol) info;
            line = s.getLeft().getLine();
            column = s.getLeft().getColumn();
            
            message.append(s.getName());
            
            if (s.value != null) {
                message.append("(");
                message.append(s.value);
                message.append(")");
            }
        } else {
            line = cur_token.left;
            column = cur_token.right;
        }
        
        if (!expectedTokens.isEmpty()) {
            message.append(", expected one of the following: ");
            boolean first = true;
            for (int expected : expectedTokens){
                if (!first) {
                    message.append(", ");
                }
                message.append(symbl_name_from_id(expected));
                first = false;
            }
        }
        
        
        SyntaxError err = new SyntaxError(message.toString(), line, column);
        if (onError == null) {
            System.err.println(err);
        } else {
            onError.accept(err);
        }
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        // ignore
    }
    
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */

terminal INVALID_TOKEN;

// Java keywords:
terminal ABSTRACT,  CONTINUE,   FOR,          NEW,         SWITCH,
         ASSERT,    DEFAULT,    IF,           PACKAGE,     SYNCHRONIZED,
         BOOLEAN,   DO,         GOTO,         PRIVATE,     THIS,
         BREAK,     DOUBLE,     IMPLEMENTS,   PROTECTED,   THROW,
         BYTE,      ELSE,       IMPORT,       PUBLIC,      THROWS,
         CASE,      ENUM,       INSTANCEOF,   RETURN,      TRANSIENT,
         CATCH,     EXTENDS,    INT,          SHORT,       TRY,
         CHAR,      FINAL,      INTERFACE,    STATIC,      VOID,
         CLASS,     FINALLY,    LONG,         STRICTFP,    VOLATILE,
         CONST,     FLOAT,      NATIVE,       SUPER,       WHILE;

// additional keywords:
terminal MAIN, STRING, LENGTH, SYSTEM, OUT, PRINTLN;

// symbols:
terminal LBRACE, RBRACE, // { }
         LBRACKET, RBRACKET, // [ ]
         LRBRACKET, // [] as a single token
         LPAREN, RPAREN, // ()
         DOT, SEMI, COMMA, EQ, NEG, AND, PLUS, MINUS, TIMES, DIV, LESS, EQUALS;

// precedence only:
terminal UMINUS;

// literals:
terminal TRUE, FALSE, NULL;

terminal String   NUMBER, ID;
   
// Non terminals used in the grammar section.  
non terminal NQJProgram program;
non terminal NQJTopLevelDeclList topLevelDeclList;
non terminal NQJTopLevelDecl topLevelDecl;
non terminal NQJClassDecl classDecl;
non terminal NQJInterfaceDecl interfaceDecl;
non terminal ArrayList<String> interfaceImplList;
non terminal NQJInterfaceDeclList interfaceImplRest;
non terminal NQJFunctionDeclList interfaceMembers;
non terminal NQJFunctionDecl interfaceFunctionDecl;
non terminal NQJMemberDeclList memberDeclList;
non terminal NQJVarDecl varDecl;
non terminal NQJFunctionDecl functionDecl;
non terminal NQJVarDeclList paramList;
non terminal NQJVarDeclList paramListRest;
non terminal NQJType type;
non terminal NQJType baseType;
non terminal Integer brackets;
non terminal NQJBlock block;
non terminal NQJStatement statement;
non terminal NQJBlock statementList;
non terminal NQJStatement blockStatement;
non terminal NQJExpr expr, expr2, expr3;
non terminal NQJExprL exprL;
non terminal NQJExprList exprList;
non terminal NQJExprList exprListRest;
non terminal NQJExprList sizesList;


//precedence nonassoc LBRACKET;
precedence right EQ;
precedence left AND;
precedence left EQUALS;
precedence left LESS;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence nonassoc NEG, UMINUS;

/* ----------------------------Grammar Section-------------------- */

program ::=
        topLevelDeclList:d
            {: RESULT = AstHelper.program(d); :}
        ;

topLevelDeclList ::= topLevelDecl:d topLevelDeclList:l
            {: RESULT = l; l.add(0, d); :}
        | /* empty */
            {: RESULT = TopLevelDeclList(); :}
        ;

topLevelDecl ::= classDecl:c
            {: RESULT = c; :}
        | functionDecl:f
            {: RESULT = f; :}
        | interfaceDecl:i
            {: RESULT = i; :}
        ;

classDecl ::=
        CLASS ID:name LBRACE memberDeclList:members RBRACE
            {: RESULT = AstHelper.classDecl(name, null, null, members); :}
      | CLASS ID:name EXTENDS ID:ext LBRACE memberDeclList:members RBRACE
            {: RESULT = AstHelper.classDecl(name, ext, null, members); :}
      | CLASS ID:name IMPLEMENTS interfaceImplList:impl LBRACE memberDeclList:members RBRACE
            {: RESULT = AstHelper.classDecl(name, null, impl, members); :}
      ;

interfaceImplList ::=
        ID:name COMMA interfaceImplList:l
            {: RESULT = l; l.add(0, name); :}
        |
        ID:name
            {: RESULT = new ArrayList<String>(); RESULT.add(name); :}
     ;

interfaceDecl ::=
        INTERFACE ID:name LBRACE interfaceMembers:members RBRACE
            {: RESULT = AstHelper.interfaceDecl(name, members); :}
        ;

interfaceMembers ::= // no fields allowed here
        interfaceFunctionDecl:m interfaceMembers:l // interface function-declarations can not have body
            {: RESULT = l; l.add(0, m); :}
        |
            {: RESULT = NQJ.FunctionDeclList(); :}
        ;

interfaceFunctionDecl ::=  // interface function-declarations are just normal function-declarations without a body
        type:returnType ID:name LPAREN paramList:params RPAREN SEMI
            {: RESULT = FunctionDecl(returnType, name, params, Block()); :}
        ;


memberDeclList ::=
        varDecl:v SEMI memberDeclList:l
            {: RESULT = l; l.add(0, v); :}
      | functionDecl:m memberDeclList:l
            {: RESULT = l; l.add(0, m); :}
      |
            {: RESULT = MemberDeclList(); :}
      ;

varDecl ::=
        type:t ID:n
            {: RESULT = VarDecl(t, n); :}
        ;

functionDecl ::=
        type:returnType ID:name LPAREN paramList:params RPAREN block:body
            {: RESULT = FunctionDecl(returnType, name, params, body); :}
        ;

paramList ::=
        varDecl:v paramListRest:l
            {: RESULT = l; l.addFront(v); :}
     |
            {: RESULT = VarDeclList(); :}
     ;

paramListRest ::=
        COMMA varDecl:v paramListRest:r
            {: RESULT = r; r.addFront(v); :}
      |
            {: RESULT = VarDeclList(); :}
      ;

exprList ::=
        expr:e exprListRest:l
            {: RESULT = l; l.addFront(e); :}
      |
            {: RESULT = ExprList(); :}
      ;

exprListRest ::=
        COMMA expr:e exprListRest:r
            {: RESULT = r; r.addFront(e); :}
      |
            {: RESULT = ExprList(); :}
      ;

baseType ::=
        BOOLEAN
            {: RESULT = TypeBool(); :}
      | INT
            {: RESULT = TypeInt(); :}
      ;

type ::=
        baseType:t brackets:b
            {: RESULT = AstHelper.buildArrayType(t, b); :}
      | exprL:l brackets:b
            {: RESULT = AstHelper.buildArrayType(l, b); :}
      ;


brackets ::=
        LRBRACKET brackets:b
            {: RESULT = b+1; :}
      |
            {: RESULT = 0; :}
      ;

block ::=
        LBRACE statementList:l RBRACE
            {: RESULT = l; :}
        ;

statementList ::=
        blockStatement:s statementList:l
            {: RESULT = l; l.addFront(s); :}
      |
            {: RESULT = Block(); :}
      ;

blockStatement ::=
        statement:s
            {: RESULT = s; :}
      | varDecl:v SEMI
            {: RESULT = v; :}
      ;

statement ::=
        block:b
            {: RESULT = b; :}
      | IF LPAREN expr:c RPAREN statement:t ELSE statement:e
            {: RESULT = StmtIf(c, t, e); :}
      | WHILE LPAREN expr:c RPAREN statement:b
            {: RESULT = StmtWhile(c, b); :}
      | RETURN expr:e SEMI
            {: RESULT = StmtReturn(e); :}
      | expr:e SEMI
            {: RESULT = StmtExpr(e); :}
      | exprL:l EQ expr:r SEMI
            {: RESULT = StmtAssign(l, r); :}
      | error SEMI
            {: RESULT = Block(); :}
      ;


expr ::=
        expr:l AND expr:r
            {: RESULT = ExprBinary(l, And(), r); :}
      | expr:l PLUS expr:r
            {: RESULT = ExprBinary(l, Plus(), r); :}
      | expr:l MINUS expr:r
            {: RESULT = ExprBinary(l, Minus(), r); :}
      | expr:l TIMES expr:r
            {: RESULT = ExprBinary(l, Times(), r); :}
      | expr:l DIV expr:r
            {: RESULT = ExprBinary(l, Div(), r); :}
      | expr:l EQUALS expr:r
            {: RESULT = ExprBinary(l, Equals(), r); :}
      | expr:l LESS expr:r
                  {: RESULT = ExprBinary(l, Less(), r); :}
      | NEG expr:e
            {: RESULT = ExprUnary(Negate(), e); :}
      | MINUS expr:e
            {: RESULT = ExprUnary(UnaryMinus(), e); :}
             %prec UMINUS
      | ID:m LPAREN exprList:args RPAREN
            {: RESULT = FunctionCall(m, args); :}
      | expr2:e
            {: RESULT = e; :}
      ;



sizesList ::=
        LBRACKET expr:e RBRACKET sizesList:l
            {:
                RESULT = l; l.addFront(e);
            :}
      |
            {: RESULT = NQJ.ExprList(); :}
      ;

expr2 ::=
        NEW baseType:t sizesList:l brackets:b
            {: RESULT = AstHelper.newArray(t, l, b); :}
      | NEW ID:t LBRACKET sizesList:l RBRACKET brackets:b
            {: RESULT = AstHelper.newArray(TypeInterfaceOrClass(t), l, b); :}
      | expr3:e
            {: RESULT = e; :}
      ;

expr3 ::=
        expr2:a DOT LENGTH
                  {: RESULT = ArrayLength(a); :}
      | expr2:r DOT ID:m LPAREN exprList:args RPAREN
            {: RESULT = MethodCall(r, m, args); :}
      | NEW ID:c LPAREN RPAREN
            {: RESULT = NewObject(c); :}
      | TRUE
            {: RESULT = BoolConst(true); :}
      | FALSE
            {: RESULT = BoolConst(false); :}
      | NUMBER:n
            {: RESULT = Number(Integer.parseInt(n)); :}
      | THIS
            {: RESULT = ExprThis(); :}
      | NULL
            {: RESULT = ExprNull(); :}
      | LPAREN expr:e RPAREN
            {: RESULT = e; :}
      | exprL:e
            {: RESULT = Read(e); :}
      ;

exprL ::= expr3:a LBRACKET expr:i RBRACKET
            {: RESULT = ArrayLookup(a, i); :}
      | ID:i
            {: RESULT = VarUse(i); :}
      | expr2:r DOT ID:n
            {: RESULT = FieldAccess(r, n); :}
      ;