<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="notquitejava.translation.DocExamples" tests="16" skipped="0" failures="0" errors="0" timestamp="2023-03-08T11:27:17" hostname="Marians-MBP" time="0.018">
  <properties/>
  <testcase name="alloca" classname="notquitejava.translation.DocExamples" time="0.0"/>
  <testcase name="binary" classname="notquitejava.translation.DocExamples" time="0.0"/>
  <testcase name="branch" classname="notquitejava.translation.DocExamples" time="0.0"/>
  <testcase name="bitcast" classname="notquitejava.translation.DocExamples" time="0.002"/>
  <testcase name="call" classname="notquitejava.translation.DocExamples" time="0.001"/>
  <testcase name="jump" classname="notquitejava.translation.DocExamples" time="0.001"/>
  <testcase name="phis" classname="notquitejava.translation.DocExamples" time="0.004"/>
  <testcase name="alloc" classname="notquitejava.translation.DocExamples" time="0.0"/>
  <testcase name="error" classname="notquitejava.translation.DocExamples" time="0.003"/>
  <testcase name="print" classname="notquitejava.translation.DocExamples" time="0.0"/>
  <testcase name="store" classname="notquitejava.translation.DocExamples" time="0.0"/>
  <testcase name="getElementPtr" classname="notquitejava.translation.DocExamples" time="0.0"/>
  <testcase name="comment" classname="notquitejava.translation.DocExamples" time="0.0"/>
  <testcase name="returnE" classname="notquitejava.translation.DocExamples" time="0.0"/>
  <testcase name="returnVoid" classname="notquitejava.translation.DocExamples" time="0.003"/>
  <testcase name="storeLoad" classname="notquitejava.translation.DocExamples" time="0.0"/>
  <system-out><![CDATA[define i32 @test() {
block:
    %x = alloca i32
    

}


define i32 @test() {
block:
    %x = add i32 5, 4
    %y = sdiv i32 %x, 2
    %z = icmp slt i32 %x, %y
    

}


define i32 @test() {
block:
    br i1 %c, label %ifTrue, label %ifFalse
    

}


define i32 @test() {
block:
    %x = call i8* @malloc(i32 128)
    %y = bitcast i8* %x to %myStruct*
    

}


define i32 @test() {
block:
    %x = call i32 @f(i32 4, i1 1)
    

}


define i32 @test() {
block:
    br label %block2
    

}


, b1:
    %a1 = load i32, i32* %x
    br label %b3
    
b2:
    %a2 = load i32, i32* %y
    br label %b3
    
b3:
    %a = phi i32 [ %a1, %b1 ], [ %a2, %b2 ]
    

define i32 @test() {
block:
    %t = call i8* @malloc(i32 100)
    

}


@.print_message_1 = private unnamed_addr constant [13 x i8] c"description\0A\00", align 1


define i32 @test() {
block:
    ; ERROR: description
    call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.print_message_1, i32 0, i32 0))
    call void @exit(i32 222)
    unreachable

    

}


declare noalias i8* @malloc(i32)

declare i32 @printf(i8*, ...)

declare void @exit(i32)

@.printstr = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
define void @print(i32 %i) {
    %temp = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.printstr, i32 0, i32 0), i32 %i)
    ret void
}

define i32 @test() {
block:
    call void @print(i32 12)
    

}


define i32 @test() {
block:
    %x = alloca i32
    store i32 42, i32* %x
    

}


, %myStruct = type {
     i1  ; a
    ,i1  ; b
    ,i32  ; c
}
define i32 @test() {
block:
    %x = getelementptr %myStruct, %myStruct* %p, i32 0, i32 1
    %y = load i1, i1* %x
    

}


define i32 @test() {
block:
    ;This is a comment
    

}


define i32 @test() {
block:
    ret i32 42
    

}


define i32 @test() {
block:
    ret void
    

}


define i32 @test() {
block:
    %x = alloca i32
    store i32 32, i32* %x
    %y = load i32, i32* %x
    

}


]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
