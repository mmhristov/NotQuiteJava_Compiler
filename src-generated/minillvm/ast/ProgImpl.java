//generated by abstract-syntax-gen
package minillvm.ast;
import java.util.*;

@SuppressWarnings({"cast", "unused", "rawtypes"})
class ProgImpl implements Prog{
    ProgImpl(TypeStructList structTypes, GlobalList globals, ProcList procedures) {
        if (structTypes == null)
            throw new IllegalArgumentException("Element structTypes must not be null.");
        if (globals == null)
            throw new IllegalArgumentException("Element globals must not be null.");
        if (procedures == null)
            throw new IllegalArgumentException("Element procedures must not be null.");
        this.structTypes = structTypes;
        this.globals = globals;
        this.procedures = procedures;
        structTypes.setParent(this);
        globals.setParent(this);
        procedures.setParent(this);
    }

    private Element parent;
    public Element getParent() { return parent; }
    public void setParent(Element parent) {
        if (parent != null && this.parent != null) {
            throw new Error("Cannot change parent of element " + this.getClass().getSimpleName() + ", as it is already used in another tree."
                + "Use the copy method to create a new tree or remove the tree from its old parent or set the parent to null before moving the tree. ");
        }
        this.parent = parent;
    }

    public void replaceBy(Element other) {
        if (parent == null)
            throw new RuntimeException("Node not attached to tree.");
        for (int i=0; i<parent.size(); i++) {
            if (parent.get(i) == this) {
                parent.set(i, other);
                return;
            }
        }
    }

    private TypeStructList structTypes;
    public void setStructTypes(TypeStructList structTypes) {
        if (structTypes == null) throw new IllegalArgumentException();
        this.structTypes.setParent(null);
        structTypes.setParent(this);
        this.structTypes = structTypes;
    } 
    public TypeStructList getStructTypes() { return structTypes; }

    private GlobalList globals;
    public void setGlobals(GlobalList globals) {
        if (globals == null) throw new IllegalArgumentException();
        this.globals.setParent(null);
        globals.setParent(this);
        this.globals = globals;
    } 
    public GlobalList getGlobals() { return globals; }

    private ProcList procedures;
    public void setProcedures(ProcList procedures) {
        if (procedures == null) throw new IllegalArgumentException();
        this.procedures.setParent(null);
        procedures.setParent(this);
        this.procedures = procedures;
    } 
    public ProcList getProcedures() { return procedures; }

    public Element get(int i) {
        switch (i) {
            case 0: return structTypes;
            case 1: return globals;
            case 2: return procedures;
            default: throw new IllegalArgumentException("Index out of range: " + i);
        }
    }
    public Element set(int i, Element newElem) {
        Element oldElem;
        switch (i) {
            case 0: oldElem = structTypes; setStructTypes((TypeStructList) newElem); return oldElem;
            case 1: oldElem = globals; setGlobals((GlobalList) newElem); return oldElem;
            case 2: oldElem = procedures; setProcedures((ProcList) newElem); return oldElem;
            default: throw new IllegalArgumentException("Index out of range: " + i);
        }
    }

    @Override
    public void forEachElement(java.util.function.Consumer<? super Element> action) {
        action.accept(this.structTypes);
        action.accept(this.globals);
        action.accept(this.procedures);
    }
    public int size() {
        return 3;
    }
    @Override public Prog copy() {
        Prog result = new ProgImpl((TypeStructList) this.structTypes.copy(), (GlobalList) this.globals.copy(), (ProcList) this.procedures.copy());
        return result;
    }

    @Override public Prog copyWithRefs() {
        Prog res = copy();
        Element self = this;
        res.accept(new Element.DefaultVisitor() {
            @Override public void visit(Sizeof e) {
                super.visit(e);
                // check reference structType
                {
                    Element elem = e.getStructType();
                    while (elem != self && elem != null) {
                        elem = elem.getParent();
                    }
                    if (elem == self) {
                        e.setStructType((TypeStruct) res.followPath(self.pathTo(e.getStructType())));
                    }
                }
            }
            @Override public void visit(ConstStruct e) {
                super.visit(e);
                // check reference structType
                {
                    Element elem = e.getStructType();
                    while (elem != self && elem != null) {
                        elem = elem.getParent();
                    }
                    if (elem == self) {
                        e.setStructType((TypeStruct) res.followPath(self.pathTo(e.getStructType())));
                    }
                }
            }
            @Override public void visit(Branch e) {
                super.visit(e);
                // check reference ifTrueLabel
                {
                    Element elem = e.getIfTrueLabel();
                    while (elem != self && elem != null) {
                        elem = elem.getParent();
                    }
                    if (elem == self) {
                        e.setIfTrueLabel((BasicBlock) res.followPath(self.pathTo(e.getIfTrueLabel())));
                    }
                }
                // check reference ifFalseLabel
                {
                    Element elem = e.getIfFalseLabel();
                    while (elem != self && elem != null) {
                        elem = elem.getParent();
                    }
                    if (elem == self) {
                        e.setIfFalseLabel((BasicBlock) res.followPath(self.pathTo(e.getIfFalseLabel())));
                    }
                }
            }
            @Override public void visit(PhiNodeChoice e) {
                super.visit(e);
                // check reference label
                {
                    Element elem = e.getLabel();
                    while (elem != self && elem != null) {
                        elem = elem.getParent();
                    }
                    if (elem == self) {
                        e.setLabel((BasicBlock) res.followPath(self.pathTo(e.getLabel())));
                    }
                }
            }
            @Override public void visit(ProcedureRef e) {
                super.visit(e);
                // check reference procedure
                {
                    Element elem = e.getProcedure();
                    while (elem != self && elem != null) {
                        elem = elem.getParent();
                    }
                    if (elem == self) {
                        e.setProcedure((Proc) res.followPath(self.pathTo(e.getProcedure())));
                    }
                }
            }
            @Override public void visit(GlobalRef e) {
                super.visit(e);
                // check reference global
                {
                    Element elem = e.getGlobal();
                    while (elem != self && elem != null) {
                        elem = elem.getParent();
                    }
                    if (elem == self) {
                        e.setGlobal((Global) res.followPath(self.pathTo(e.getGlobal())));
                    }
                }
            }
            @Override public void visit(Jump e) {
                super.visit(e);
                // check reference label
                {
                    Element elem = e.getLabel();
                    while (elem != self && elem != null) {
                        elem = elem.getParent();
                    }
                    if (elem == self) {
                        e.setLabel((BasicBlock) res.followPath(self.pathTo(e.getLabel())));
                    }
                }
            }
        });
        return res;
    }

    @Override public void clearAttributes() {
        structTypes.clearAttributes();
        globals.clearAttributes();
        procedures.clearAttributes();
        clearAttributesLocal();
    }
    @Override public void clearAttributesLocal() {
    }
    @Override public void accept(Visitor v) {
        v.visit(this);
    }
    @Override public <T> T match(Element.Matcher<T> matcher) {
        return matcher.case_Prog(this);
    }
    @Override public void match(Element.MatcherVoid matcher) {
        matcher.case_Prog(this);
    }

    public boolean structuralEquals(Element e) {
        if (e instanceof Prog) {
            Prog o = (Prog) e;
            return this.structTypes.structuralEquals(o.getStructTypes())
                && this.globals.structuralEquals(o.getGlobals())
                && this.procedures.structuralEquals(o.getProcedures());
        } else {
            return false;
        }
    }
    /** */
    public String toString() {
        return minillvm.printer.PrettyPrinter.elementToString((Prog)this);
    }
}
