//generated by abstract-syntax-gen
package minillvm.ast;
import java.util.*;

@SuppressWarnings({"cast", "unused", "rawtypes"})
class BranchImpl implements Branch{
    BranchImpl(Operand condition, BasicBlock ifTrueLabel, BasicBlock ifFalseLabel) {
        if (condition == null)
            throw new IllegalArgumentException("Element condition must not be null.");
        if (ifTrueLabel == null)
            throw new IllegalArgumentException("Element ifTrueLabel must not be null.");
        if (ifFalseLabel == null)
            throw new IllegalArgumentException("Element ifFalseLabel must not be null.");
        this.condition = condition;
        this.ifTrueLabel = ifTrueLabel;
        this.ifFalseLabel = ifFalseLabel;
        condition.setParent(this);
    }

    private Element parent;
    public Element getParent() { return parent; }
    public void setParent(Element parent) {
        if (parent != null && this.parent != null) {
            throw new Error("Cannot change parent of element " + this.getClass().getSimpleName() + ", as it is already used in another tree."
                + "Use the copy method to create a new tree or remove the tree from its old parent or set the parent to null before moving the tree. ");
        }
        this.parent = parent;
    }

    public void replaceBy(Element other) {
        if (parent == null)
            throw new RuntimeException("Node not attached to tree.");
        for (int i=0; i<parent.size(); i++) {
            if (parent.get(i) == this) {
                parent.set(i, other);
                return;
            }
        }
    }

    private Operand condition;
    public void setCondition(Operand condition) {
        if (condition == null) throw new IllegalArgumentException();
        this.condition.setParent(null);
        condition.setParent(this);
        this.condition = condition;
    } 
    public Operand getCondition() { return condition; }

    private BasicBlock ifTrueLabel;
    public void setIfTrueLabel(BasicBlock ifTrueLabel) {
        if (ifTrueLabel == null) throw new IllegalArgumentException();
        this.ifTrueLabel = ifTrueLabel;
    } 
    public BasicBlock getIfTrueLabel() { return ifTrueLabel; }

    private BasicBlock ifFalseLabel;
    public void setIfFalseLabel(BasicBlock ifFalseLabel) {
        if (ifFalseLabel == null) throw new IllegalArgumentException();
        this.ifFalseLabel = ifFalseLabel;
    } 
    public BasicBlock getIfFalseLabel() { return ifFalseLabel; }

    public Element get(int i) {
        switch (i) {
            case 0: return condition;
            default: throw new IllegalArgumentException("Index out of range: " + i);
        }
    }
    public Element set(int i, Element newElem) {
        Element oldElem;
        switch (i) {
            case 0: oldElem = condition; setCondition((Operand) newElem); return oldElem;
            default: throw new IllegalArgumentException("Index out of range: " + i);
        }
    }

    @Override
    public void forEachElement(java.util.function.Consumer<? super Element> action) {
        action.accept(this.condition);
    }
    public int size() {
        return 1;
    }
    @Override public Branch copy() {
        Branch result = new BranchImpl((Operand) this.condition.copy(), ifTrueLabel, ifFalseLabel);
        return result;
    }

    @Override public Branch copyWithRefs() {
        Branch res = copy();
        return res;
    }

    @Override public void clearAttributes() {
        condition.clearAttributes();
        clearAttributesLocal();
    }
    @Override public void clearAttributesLocal() {
    }
    @Override public void accept(Visitor v) {
        v.visit(this);
    }
    @Override public <T> T match(TerminatingInstruction.Matcher<T> matcher) {
        return matcher.case_Branch(this);
    }
    @Override public void match(TerminatingInstruction.MatcherVoid matcher) {
        matcher.case_Branch(this);
    }

    @Override public <T> T match(Instruction.Matcher<T> matcher) {
        return matcher.case_Branch(this);
    }
    @Override public void match(Instruction.MatcherVoid matcher) {
        matcher.case_Branch(this);
    }

    @Override public <T> T match(Element.Matcher<T> matcher) {
        return matcher.case_Branch(this);
    }
    @Override public void match(Element.MatcherVoid matcher) {
        matcher.case_Branch(this);
    }

    public boolean structuralEquals(Element e) {
        if (e instanceof Branch) {
            Branch o = (Branch) e;
            return this.condition.structuralEquals(o.getCondition())
                && this.ifTrueLabel == o.getIfTrueLabel()
                && this.ifFalseLabel == o.getIfFalseLabel();
        } else {
            return false;
        }
    }
    /** */
    public String toString() {
        return minillvm.printer.PrettyPrinter.elementToString((Branch)this);
    }
}
