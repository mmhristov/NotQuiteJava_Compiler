//generated by abstract-syntax-gen
package minillvm.ast;
import java.util.*;

@SuppressWarnings({"cast", "unused", "rawtypes"})
class ProcedureRefImpl implements ProcedureRef{
    ProcedureRefImpl(Proc procedure) {
        if (procedure == null)
            throw new IllegalArgumentException("Element procedure must not be null.");
        this.procedure = procedure;
    }

    private Element parent;
    public Element getParent() { return parent; }
    public void setParent(Element parent) {
        if (parent != null && this.parent != null) {
            throw new Error("Cannot change parent of element " + this.getClass().getSimpleName() + ", as it is already used in another tree."
                + "Use the copy method to create a new tree or remove the tree from its old parent or set the parent to null before moving the tree. ");
        }
        this.parent = parent;
    }

    public void replaceBy(Element other) {
        if (parent == null)
            throw new RuntimeException("Node not attached to tree.");
        for (int i=0; i<parent.size(); i++) {
            if (parent.get(i) == this) {
                parent.set(i, other);
                return;
            }
        }
    }

    private Proc procedure;
    public void setProcedure(Proc procedure) {
        if (procedure == null) throw new IllegalArgumentException();
        this.procedure = procedure;
    } 
    public Proc getProcedure() { return procedure; }

    public Element get(int i) {
        switch (i) {
            default: throw new IllegalArgumentException("Index out of range: " + i);
        }
    }
    public Element set(int i, Element newElem) {
        Element oldElem;
        switch (i) {
            default: throw new IllegalArgumentException("Index out of range: " + i);
        }
    }

    @Override
    public void forEachElement(java.util.function.Consumer<? super Element> action) {
    }
    public int size() {
        return 0;
    }
    @Override public ProcedureRef copy() {
        ProcedureRef result = new ProcedureRefImpl(procedure);
        return result;
    }

    @Override public ProcedureRef copyWithRefs() {
        ProcedureRef res = copy();
        return res;
    }

    @Override public void clearAttributes() {
        clearAttributesLocal();
    }
    @Override public void clearAttributesLocal() {
    }
    @Override public void accept(Visitor v) {
        v.visit(this);
    }
    @Override public <T> T match(Operand.Matcher<T> matcher) {
        return matcher.case_ProcedureRef(this);
    }
    @Override public void match(Operand.MatcherVoid matcher) {
        matcher.case_ProcedureRef(this);
    }

    @Override public <T> T match(Const.Matcher<T> matcher) {
        return matcher.case_ProcedureRef(this);
    }
    @Override public void match(Const.MatcherVoid matcher) {
        matcher.case_ProcedureRef(this);
    }

    @Override public <T> T match(Element.Matcher<T> matcher) {
        return matcher.case_ProcedureRef(this);
    }
    @Override public void match(Element.MatcherVoid matcher) {
        matcher.case_ProcedureRef(this);
    }

    public boolean structuralEquals(Element e) {
        if (e instanceof ProcedureRef) {
            ProcedureRef o = (ProcedureRef) e;
            return this.procedure == o.getProcedure();
        } else {
            return false;
        }
    }
    /** */
    public String toString() {
        return minillvm.printer.PrettyPrinter.elementToString((ProcedureRef)this);
    }
    /** */
    public Type calculateType() {
        return minillvm.analysis.Typechecker.calculateType((ProcedureRef)this);
    }
}
