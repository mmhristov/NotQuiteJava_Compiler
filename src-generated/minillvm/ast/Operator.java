//generated by abstract-syntax-gen
package minillvm.ast;
import java.util.*;

public interface Operator extends Element{
    Element getParent();
    <T> T match(Matcher<T> s);
    void match(MatcherVoid s);
    public interface Matcher<T> {
        T case_Sdiv(Sdiv sdiv);
        T case_Eq(Eq eq);
        T case_And(And and);
        T case_Sub(Sub sub);
        T case_Or(Or or);
        T case_Srem(Srem srem);
        T case_Add(Add add);
        T case_Mul(Mul mul);
        T case_Xor(Xor xor);
        T case_Slt(Slt slt);
    }

    public interface MatcherVoid {
        void case_Sdiv(Sdiv sdiv);
        void case_Eq(Eq eq);
        void case_And(And and);
        void case_Sub(Sub sub);
        void case_Or(Or or);
        void case_Srem(Srem srem);
        void case_Add(Add add);
        void case_Mul(Mul mul);
        void case_Xor(Xor xor);
        void case_Slt(Slt slt);
    }

    Operator copy();
    Operator copyWithRefs();
    /** */
    public abstract String toString();
}
