//generated by abstract-syntax-gen
package minillvm.ast;
import java.util.*;

@SuppressWarnings({"cast", "unused", "rawtypes"})
class ConstStructImpl implements ConstStruct{
    ConstStructImpl(TypeStruct structType, ConstList values) {
        if (structType == null)
            throw new IllegalArgumentException("Element structType must not be null.");
        if (values == null)
            throw new IllegalArgumentException("Element values must not be null.");
        this.structType = structType;
        this.values = values;
        values.setParent(this);
    }

    private Element parent;
    public Element getParent() { return parent; }
    public void setParent(Element parent) {
        if (parent != null && this.parent != null) {
            throw new Error("Cannot change parent of element " + this.getClass().getSimpleName() + ", as it is already used in another tree."
                + "Use the copy method to create a new tree or remove the tree from its old parent or set the parent to null before moving the tree. ");
        }
        this.parent = parent;
    }

    public void replaceBy(Element other) {
        if (parent == null)
            throw new RuntimeException("Node not attached to tree.");
        for (int i=0; i<parent.size(); i++) {
            if (parent.get(i) == this) {
                parent.set(i, other);
                return;
            }
        }
    }

    private TypeStruct structType;
    public void setStructType(TypeStruct structType) {
        if (structType == null) throw new IllegalArgumentException();
        this.structType = structType;
    } 
    public TypeStruct getStructType() { return structType; }

    private ConstList values;
    public void setValues(ConstList values) {
        if (values == null) throw new IllegalArgumentException();
        this.values.setParent(null);
        values.setParent(this);
        this.values = values;
    } 
    public ConstList getValues() { return values; }

    public Element get(int i) {
        switch (i) {
            case 0: return values;
            default: throw new IllegalArgumentException("Index out of range: " + i);
        }
    }
    public Element set(int i, Element newElem) {
        Element oldElem;
        switch (i) {
            case 0: oldElem = values; setValues((ConstList) newElem); return oldElem;
            default: throw new IllegalArgumentException("Index out of range: " + i);
        }
    }

    @Override
    public void forEachElement(java.util.function.Consumer<? super Element> action) {
        action.accept(this.values);
    }
    public int size() {
        return 1;
    }
    @Override public ConstStruct copy() {
        ConstStruct result = new ConstStructImpl(structType, (ConstList) this.values.copy());
        return result;
    }

    @Override public ConstStruct copyWithRefs() {
        ConstStruct res = copy();
        return res;
    }

    @Override public void clearAttributes() {
        values.clearAttributes();
        clearAttributesLocal();
    }
    @Override public void clearAttributesLocal() {
    }
    @Override public void accept(Visitor v) {
        v.visit(this);
    }
    @Override public <T> T match(Operand.Matcher<T> matcher) {
        return matcher.case_ConstStruct(this);
    }
    @Override public void match(Operand.MatcherVoid matcher) {
        matcher.case_ConstStruct(this);
    }

    @Override public <T> T match(Const.Matcher<T> matcher) {
        return matcher.case_ConstStruct(this);
    }
    @Override public void match(Const.MatcherVoid matcher) {
        matcher.case_ConstStruct(this);
    }

    @Override public <T> T match(Element.Matcher<T> matcher) {
        return matcher.case_ConstStruct(this);
    }
    @Override public void match(Element.MatcherVoid matcher) {
        matcher.case_ConstStruct(this);
    }

    public boolean structuralEquals(Element e) {
        if (e instanceof ConstStruct) {
            ConstStruct o = (ConstStruct) e;
            return this.structType == o.getStructType()
                && this.values.structuralEquals(o.getValues());
        } else {
            return false;
        }
    }
    /** */
    public String toString() {
        return minillvm.printer.PrettyPrinter.elementToString((ConstStruct)this);
    }
    /** */
    public Type calculateType() {
        return minillvm.analysis.Typechecker.calculateType((ConstStruct)this);
    }
}
