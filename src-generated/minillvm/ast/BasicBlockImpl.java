//generated by abstract-syntax-gen
package minillvm.ast;
import java.util.*;

@SuppressWarnings({"cast", "unused", "rawtypes"})
class BasicBlockImpl extends BasicBlock {
     private Element parent;
    public Element getParent() { return parent; }
    public void setParent(Element parent) {
        if (parent != null && this.parent != null) {
            throw new Error("Cannot change parent of element " + this.getClass().getSimpleName() + ", as it is already used in another tree."
                + "Use the copy method to create a new tree or remove the tree from its old parent or set the parent to null before moving the tree. ");
        }
        this.parent = parent;
    }

    public void replaceBy(Element other) {
        if (parent == null)
            throw new RuntimeException("Node not attached to tree.");
        for (int i=0; i<parent.size(); i++) {
            if (parent.get(i) == this) {
                parent.set(i, other);
                return;
            }
        }
    }

    protected void other_setParentToThis(Instruction t) {
        t.setParent(this);
    }

    protected void other_clearParent(Instruction t) {
        t.setParent(null);
    }

    @Override
    public Element set(int i, Element newElement) {
        return ((AsgList<Instruction>) this).set(i, (Instruction) newElement);
    }

    @Override public <T> T match(Element.Matcher<T> matcher) {
        return matcher.case_BasicBlock(this);
    }
    @Override public void match(Element.MatcherVoid matcher) {
        matcher.case_BasicBlock(this);
    }

    @Override public void accept(Visitor v) {
        v.visit(this);
    }
    @Override public void clearAttributes() {
        for (Instruction child : this) {
            child.clearAttributes();
        }
        clearAttributesLocal();
    }
    @Override public void clearAttributesLocal() {
    }
    /** */
    public String toString() {
        return minillvm.printer.PrettyPrinter.elementToString((BasicBlock)this);
    }
    /** "returns the phi node instructions at the beginning of the basic block"*/
    public java.util.List<PhiNode> getPhiNodes() {
        return minillvm.analysis.BasicBlocks.getPhiNodes((BasicBlock)this);
    }
    /** "returns the final terminating instruction of the basic block if any"*/
    public java.util.Optional<TerminatingInstruction> getTerminatingInstruction() {
        return minillvm.analysis.BasicBlocks.getTerminatingInstruction((BasicBlock)this);
    }
    private String name;
    /** "a name for this basic block"*/
    public String getName() {
        return name;
    }
    /** "a name for this basic block"*/
    public void setName(String name) {
        this.name = name;
    }
}
