//generated by abstract-syntax-gen
package minillvm.ast;
import java.util.*;

public interface Operand extends Element{
    Element getParent();
    <T> T match(Matcher<T> s);
    void match(MatcherVoid s);
    public interface Matcher<T> {
        T case_Sizeof(Sizeof sizeof);
        T case_Nullpointer(Nullpointer nullpointer);
        T case_ProcedureRef(ProcedureRef procedureRef);
        T case_ConstStruct(ConstStruct constStruct);
        T case_VarRef(VarRef varRef);
        T case_ConstInt(ConstInt constInt);
        T case_GlobalRef(GlobalRef globalRef);
        T case_ConstBool(ConstBool constBool);
    }

    public interface MatcherVoid {
        void case_Sizeof(Sizeof sizeof);
        void case_Nullpointer(Nullpointer nullpointer);
        void case_ProcedureRef(ProcedureRef procedureRef);
        void case_ConstStruct(ConstStruct constStruct);
        void case_VarRef(VarRef varRef);
        void case_ConstInt(ConstInt constInt);
        void case_GlobalRef(GlobalRef globalRef);
        void case_ConstBool(ConstBool constBool);
    }

    Operand copy();
    Operand copyWithRefs();
    /** */
    public abstract String toString();
    /** */
    public abstract Type calculateType();
}
