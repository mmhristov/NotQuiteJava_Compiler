//generated by abstract-syntax-gen
package minillvm.ast;
import java.util.*;

public interface Element {
    Element getParent();
    Element copy();
    Element copyWithRefs();
    int size();
    void clearAttributes();
    void clearAttributesLocal();
    Element get(int i);
    Element set(int i, Element newElement);
    void forEachElement(java.util.function.Consumer<? super Element> action);
    default void trimToSize() {        forEachElement(Element::trimToSize);    }    void setParent(Element parent);
    void replaceBy(Element other);
    boolean structuralEquals(Element elem);
    default List<Integer> pathTo(Element  elem) {
        List<Integer> path = new ArrayList<>();
        while (elem != this) {
            if (elem == null) {
                throw new RuntimeException("Element " + elem + " is not a parent of " + this);
            }
            Element parent = elem.getParent();
            for (int i = 0; i < parent.size(); i++) {
                if (parent.get(i) == elem) {
                    path.add(i);
                    break;
                }
            }
            elem = parent;
        }
        Collections.reverse(path);
        return path;
    }

    default Element followPath(Iterable<Integer> path) {
        Element elem = this;
        for (Integer i : path) {
            elem = elem.get(i);
        }
        return elem;
    }
    <T> T match(Matcher<T> s);
    void match(MatcherVoid s);
    public interface Matcher<T> {
        T case_Global(Global global);
        T case_Store(Store store);
        T case_Sizeof(Sizeof sizeof);
        T case_Proc(Proc proc);
        T case_ConstStruct(ConstStruct constStruct);
        T case_Sub(Sub sub);
        T case_BasicBlockList(BasicBlockList basicBlockList);
        T case_Branch(Branch branch);
        T case_Parameter(Parameter parameter);
        T case_Srem(Srem srem);
        T case_Slt(Slt slt);
        T case_Eq(Eq eq);
        T case_BinaryOperation(BinaryOperation binaryOperation);
        T case_VarRef(VarRef varRef);
        T case_Alloca(Alloca alloca);
        T case_Add(Add add);
        T case_StructFieldList(StructFieldList structFieldList);
        T case_ConstBool(ConstBool constBool);
        T case_Xor(Xor xor);
        T case_PhiNodeChoice(PhiNodeChoice phiNodeChoice);
        T case_Nullpointer(Nullpointer nullpointer);
        T case_TypeInt(TypeInt typeInt);
        T case_TemporaryVar(TemporaryVar temporaryVar);
        T case_ReturnExpr(ReturnExpr returnExpr);
        T case_Print(Print print);
        T case_Load(Load load);
        T case_Bitcast(Bitcast bitcast);
        T case_TypeArray(TypeArray typeArray);
        T case_TypeVoid(TypeVoid typeVoid);
        T case_TypeBool(TypeBool typeBool);
        T case_GetElementPtr(GetElementPtr getElementPtr);
        T case_TypeRefList(TypeRefList typeRefList);
        T case_ConstInt(ConstInt constInt);
        T case_Mul(Mul mul);
        T case_PhiNodeList(PhiNodeList phiNodeList);
        T case_ReturnVoid(ReturnVoid returnVoid);
        T case_OperandList(OperandList operandList);
        T case_GlobalList(GlobalList globalList);
        T case_StructField(StructField structField);
        T case_Alloc(Alloc alloc);
        T case_HaltWithError(HaltWithError haltWithError);
        T case_TypeByte(TypeByte typeByte);
        T case_TypeStruct(TypeStruct typeStruct);
        T case_And(And and);
        T case_ParameterList(ParameterList parameterList);
        T case_ProcedureRef(ProcedureRef procedureRef);
        T case_Or(Or or);
        T case_ConstList(ConstList constList);
        T case_PhiNode(PhiNode phiNode);
        T case_ProcList(ProcList procList);
        T case_BasicBlock(BasicBlock basicBlock);
        T case_InstructionList(InstructionList instructionList);
        T case_TypePointer(TypePointer typePointer);
        T case_GlobalRef(GlobalRef globalRef);
        T case_Call(Call call);
        T case_Sdiv(Sdiv sdiv);
        T case_TypeStructList(TypeStructList typeStructList);
        T case_Prog(Prog prog);
        T case_CommentInstr(CommentInstr commentInstr);
        T case_TypeProc(TypeProc typeProc);
        T case_PhiNodeChoiceList(PhiNodeChoiceList phiNodeChoiceList);
        T case_Jump(Jump jump);
        T case_TypeNullpointer(TypeNullpointer typeNullpointer);
    }

    public interface MatcherVoid {
        void case_Global(Global global);
        void case_Store(Store store);
        void case_Sizeof(Sizeof sizeof);
        void case_Proc(Proc proc);
        void case_ConstStruct(ConstStruct constStruct);
        void case_Sub(Sub sub);
        void case_BasicBlockList(BasicBlockList basicBlockList);
        void case_Branch(Branch branch);
        void case_Parameter(Parameter parameter);
        void case_Srem(Srem srem);
        void case_Slt(Slt slt);
        void case_Eq(Eq eq);
        void case_BinaryOperation(BinaryOperation binaryOperation);
        void case_VarRef(VarRef varRef);
        void case_Alloca(Alloca alloca);
        void case_Add(Add add);
        void case_StructFieldList(StructFieldList structFieldList);
        void case_ConstBool(ConstBool constBool);
        void case_Xor(Xor xor);
        void case_PhiNodeChoice(PhiNodeChoice phiNodeChoice);
        void case_Nullpointer(Nullpointer nullpointer);
        void case_TypeInt(TypeInt typeInt);
        void case_TemporaryVar(TemporaryVar temporaryVar);
        void case_ReturnExpr(ReturnExpr returnExpr);
        void case_Print(Print print);
        void case_Load(Load load);
        void case_Bitcast(Bitcast bitcast);
        void case_TypeArray(TypeArray typeArray);
        void case_TypeVoid(TypeVoid typeVoid);
        void case_TypeBool(TypeBool typeBool);
        void case_GetElementPtr(GetElementPtr getElementPtr);
        void case_TypeRefList(TypeRefList typeRefList);
        void case_ConstInt(ConstInt constInt);
        void case_Mul(Mul mul);
        void case_PhiNodeList(PhiNodeList phiNodeList);
        void case_ReturnVoid(ReturnVoid returnVoid);
        void case_OperandList(OperandList operandList);
        void case_GlobalList(GlobalList globalList);
        void case_StructField(StructField structField);
        void case_Alloc(Alloc alloc);
        void case_HaltWithError(HaltWithError haltWithError);
        void case_TypeByte(TypeByte typeByte);
        void case_TypeStruct(TypeStruct typeStruct);
        void case_And(And and);
        void case_ParameterList(ParameterList parameterList);
        void case_ProcedureRef(ProcedureRef procedureRef);
        void case_Or(Or or);
        void case_ConstList(ConstList constList);
        void case_PhiNode(PhiNode phiNode);
        void case_ProcList(ProcList procList);
        void case_BasicBlock(BasicBlock basicBlock);
        void case_InstructionList(InstructionList instructionList);
        void case_TypePointer(TypePointer typePointer);
        void case_GlobalRef(GlobalRef globalRef);
        void case_Call(Call call);
        void case_Sdiv(Sdiv sdiv);
        void case_TypeStructList(TypeStructList typeStructList);
        void case_Prog(Prog prog);
        void case_CommentInstr(CommentInstr commentInstr);
        void case_TypeProc(TypeProc typeProc);
        void case_PhiNodeChoiceList(PhiNodeChoiceList phiNodeChoiceList);
        void case_Jump(Jump jump);
        void case_TypeNullpointer(TypeNullpointer typeNullpointer);
    }

    public abstract void accept(Visitor v);
    public interface Visitor {
        void visit(Prog prog);
        void visit(Global global);
        void visit(Parameter parameter);
        void visit(TemporaryVar temporaryVar);
        void visit(Proc proc);
        void visit(Print print);
        void visit(Store store);
        void visit(CommentInstr commentInstr);
        void visit(Alloc alloc);
        void visit(Alloca alloca);
        void visit(BinaryOperation binaryOperation);
        void visit(Bitcast bitcast);
        void visit(Call call);
        void visit(GetElementPtr getElementPtr);
        void visit(Load load);
        void visit(PhiNode phiNode);
        void visit(Add add);
        void visit(Sub sub);
        void visit(Mul mul);
        void visit(Sdiv sdiv);
        void visit(Srem srem);
        void visit(And and);
        void visit(Or or);
        void visit(Xor xor);
        void visit(Eq eq);
        void visit(Slt slt);
        void visit(PhiNodeChoice phiNodeChoice);
        void visit(Branch branch);
        void visit(Jump jump);
        void visit(ReturnExpr returnExpr);
        void visit(ReturnVoid returnVoid);
        void visit(HaltWithError haltWithError);
        void visit(VarRef varRef);
        void visit(ConstBool constBool);
        void visit(ConstInt constInt);
        void visit(GlobalRef globalRef);
        void visit(ProcedureRef procedureRef);
        void visit(Nullpointer nullpointer);
        void visit(Sizeof sizeof);
        void visit(ConstStruct constStruct);
        void visit(TypeArray typeArray);
        void visit(TypeBool typeBool);
        void visit(TypeByte typeByte);
        void visit(TypeInt typeInt);
        void visit(TypePointer typePointer);
        void visit(TypeNullpointer typeNullpointer);
        void visit(TypeProc typeProc);
        void visit(TypeStruct typeStruct);
        void visit(TypeVoid typeVoid);
        void visit(StructField structField);
        void visit(BasicBlock basicBlock);
        void visit(TypeStructList typeStructList);
        void visit(GlobalList globalList);
        void visit(ProcList procList);
        void visit(ParameterList parameterList);
        void visit(ConstList constList);
        void visit(StructFieldList structFieldList);
        void visit(TypeRefList typeRefList);
        void visit(BasicBlockList basicBlockList);
        void visit(PhiNodeList phiNodeList);
        void visit(PhiNodeChoiceList phiNodeChoiceList);
        void visit(InstructionList instructionList);
        void visit(OperandList operandList);
    }
    public static abstract class DefaultVisitor implements Visitor {
        @Override public void visit(Prog prog) {
          prog.getStructTypes().accept(this);
          prog.getGlobals().accept(this);
          prog.getProcedures().accept(this);
     }
        @Override public void visit(Global global) {
          global.getInitialValue().accept(this);
     }
        @Override public void visit(Parameter parameter) {
     }
        @Override public void visit(TemporaryVar temporaryVar) {
     }
        @Override public void visit(Proc proc) {
          proc.getParameters().accept(this);
          proc.getBasicBlocks().accept(this);
     }
        @Override public void visit(Print print) {
          print.getE().accept(this);
     }
        @Override public void visit(Store store) {
          store.getAddress().accept(this);
          store.getValue().accept(this);
     }
        @Override public void visit(CommentInstr commentInstr) {
     }
        @Override public void visit(Alloc alloc) {
          alloc.getVar().accept(this);
          alloc.getSizeInBytes().accept(this);
     }
        @Override public void visit(Alloca alloca) {
          alloca.getVar().accept(this);
     }
        @Override public void visit(BinaryOperation binaryOperation) {
          binaryOperation.getVar().accept(this);
          binaryOperation.getLeft().accept(this);
          binaryOperation.getOperator().accept(this);
          binaryOperation.getRight().accept(this);
     }
        @Override public void visit(Bitcast bitcast) {
          bitcast.getVar().accept(this);
          bitcast.getExpr().accept(this);
     }
        @Override public void visit(Call call) {
          call.getVar().accept(this);
          call.getFunction().accept(this);
          call.getArguments().accept(this);
     }
        @Override public void visit(GetElementPtr getElementPtr) {
          getElementPtr.getVar().accept(this);
          getElementPtr.getBaseAddress().accept(this);
          getElementPtr.getIndices().accept(this);
     }
        @Override public void visit(Load load) {
          load.getVar().accept(this);
          load.getAddress().accept(this);
     }
        @Override public void visit(PhiNode phiNode) {
          phiNode.getVar().accept(this);
          phiNode.getChoices().accept(this);
     }
        @Override public void visit(Add add) {
     }
        @Override public void visit(Sub sub) {
     }
        @Override public void visit(Mul mul) {
     }
        @Override public void visit(Sdiv sdiv) {
     }
        @Override public void visit(Srem srem) {
     }
        @Override public void visit(And and) {
     }
        @Override public void visit(Or or) {
     }
        @Override public void visit(Xor xor) {
     }
        @Override public void visit(Eq eq) {
     }
        @Override public void visit(Slt slt) {
     }
        @Override public void visit(PhiNodeChoice phiNodeChoice) {
          phiNodeChoice.getValue().accept(this);
     }
        @Override public void visit(Branch branch) {
          branch.getCondition().accept(this);
     }
        @Override public void visit(Jump jump) {
     }
        @Override public void visit(ReturnExpr returnExpr) {
          returnExpr.getReturnValue().accept(this);
     }
        @Override public void visit(ReturnVoid returnVoid) {
     }
        @Override public void visit(HaltWithError haltWithError) {
     }
        @Override public void visit(VarRef varRef) {
     }
        @Override public void visit(ConstBool constBool) {
     }
        @Override public void visit(ConstInt constInt) {
     }
        @Override public void visit(GlobalRef globalRef) {
     }
        @Override public void visit(ProcedureRef procedureRef) {
     }
        @Override public void visit(Nullpointer nullpointer) {
     }
        @Override public void visit(Sizeof sizeof) {
     }
        @Override public void visit(ConstStruct constStruct) {
          constStruct.getValues().accept(this);
     }
        @Override public void visit(TypeArray typeArray) {
     }
        @Override public void visit(TypeBool typeBool) {
     }
        @Override public void visit(TypeByte typeByte) {
     }
        @Override public void visit(TypeInt typeInt) {
     }
        @Override public void visit(TypePointer typePointer) {
     }
        @Override public void visit(TypeNullpointer typeNullpointer) {
     }
        @Override public void visit(TypeProc typeProc) {
          typeProc.getArgTypes().accept(this);
     }
        @Override public void visit(TypeStruct typeStruct) {
          typeStruct.getFields().accept(this);
     }
        @Override public void visit(TypeVoid typeVoid) {
     }
        @Override public void visit(StructField structField) {
     }
        @Override public void visit(BasicBlock basicBlock) {
          for (Instruction i : basicBlock ) {
              i.accept(this);
          }
     }
        @Override public void visit(TypeStructList typeStructList) {
          for (TypeStruct i : typeStructList ) {
              i.accept(this);
          }
     }
        @Override public void visit(GlobalList globalList) {
          for (Global i : globalList ) {
              i.accept(this);
          }
     }
        @Override public void visit(ProcList procList) {
          for (Proc i : procList ) {
              i.accept(this);
          }
     }
        @Override public void visit(ParameterList parameterList) {
          for (Parameter i : parameterList ) {
              i.accept(this);
          }
     }
        @Override public void visit(ConstList constList) {
          for (Const i : constList ) {
              i.accept(this);
          }
     }
        @Override public void visit(StructFieldList structFieldList) {
          for (StructField i : structFieldList ) {
              i.accept(this);
          }
     }
        @Override public void visit(TypeRefList typeRefList) {
          for (Type i : typeRefList ) {
              i.accept(this);
          }
     }
        @Override public void visit(BasicBlockList basicBlockList) {
          for (BasicBlock i : basicBlockList ) {
              i.accept(this);
          }
     }
        @Override public void visit(PhiNodeList phiNodeList) {
          for (PhiNode i : phiNodeList ) {
              i.accept(this);
          }
     }
        @Override public void visit(PhiNodeChoiceList phiNodeChoiceList) {
          for (PhiNodeChoice i : phiNodeChoiceList ) {
              i.accept(this);
          }
     }
        @Override public void visit(InstructionList instructionList) {
          for (Instruction i : instructionList ) {
              i.accept(this);
          }
     }
        @Override public void visit(OperandList operandList) {
          for (Operand i : operandList ) {
              i.accept(this);
          }
     }
    }
    /** */
    public abstract String toString();
}

