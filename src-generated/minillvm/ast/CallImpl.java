//generated by abstract-syntax-gen
package minillvm.ast;
import java.util.*;

@SuppressWarnings({"cast", "unused", "rawtypes"})
class CallImpl implements Call{
    CallImpl(TemporaryVar var, Operand function, OperandList arguments) {
        if (var == null)
            throw new IllegalArgumentException("Element var must not be null.");
        if (function == null)
            throw new IllegalArgumentException("Element function must not be null.");
        if (arguments == null)
            throw new IllegalArgumentException("Element arguments must not be null.");
        this.var = var;
        this.function = function;
        this.arguments = arguments;
        var.setParent(this);
        function.setParent(this);
        arguments.setParent(this);
    }

    private Element parent;
    public Element getParent() { return parent; }
    public void setParent(Element parent) {
        if (parent != null && this.parent != null) {
            throw new Error("Cannot change parent of element " + this.getClass().getSimpleName() + ", as it is already used in another tree."
                + "Use the copy method to create a new tree or remove the tree from its old parent or set the parent to null before moving the tree. ");
        }
        this.parent = parent;
    }

    public void replaceBy(Element other) {
        if (parent == null)
            throw new RuntimeException("Node not attached to tree.");
        for (int i=0; i<parent.size(); i++) {
            if (parent.get(i) == this) {
                parent.set(i, other);
                return;
            }
        }
    }

    private TemporaryVar var;
    public void setVar(TemporaryVar var) {
        if (var == null) throw new IllegalArgumentException();
        this.var.setParent(null);
        var.setParent(this);
        this.var = var;
    } 
    public TemporaryVar getVar() { return var; }

    private Operand function;
    public void setFunction(Operand function) {
        if (function == null) throw new IllegalArgumentException();
        this.function.setParent(null);
        function.setParent(this);
        this.function = function;
    } 
    public Operand getFunction() { return function; }

    private OperandList arguments;
    public void setArguments(OperandList arguments) {
        if (arguments == null) throw new IllegalArgumentException();
        this.arguments.setParent(null);
        arguments.setParent(this);
        this.arguments = arguments;
    } 
    public OperandList getArguments() { return arguments; }

    public Element get(int i) {
        switch (i) {
            case 0: return var;
            case 1: return function;
            case 2: return arguments;
            default: throw new IllegalArgumentException("Index out of range: " + i);
        }
    }
    public Element set(int i, Element newElem) {
        Element oldElem;
        switch (i) {
            case 0: oldElem = var; setVar((TemporaryVar) newElem); return oldElem;
            case 1: oldElem = function; setFunction((Operand) newElem); return oldElem;
            case 2: oldElem = arguments; setArguments((OperandList) newElem); return oldElem;
            default: throw new IllegalArgumentException("Index out of range: " + i);
        }
    }

    @Override
    public void forEachElement(java.util.function.Consumer<? super Element> action) {
        action.accept(this.var);
        action.accept(this.function);
        action.accept(this.arguments);
    }
    public int size() {
        return 3;
    }
    @Override public Call copy() {
        Call result = new CallImpl((TemporaryVar) this.var.copy(), (Operand) this.function.copy(), (OperandList) this.arguments.copy());
        return result;
    }

    @Override public Call copyWithRefs() {
        Call res = copy();
        return res;
    }

    @Override public void clearAttributes() {
        var.clearAttributes();
        function.clearAttributes();
        arguments.clearAttributes();
        clearAttributesLocal();
    }
    @Override public void clearAttributesLocal() {
    }
    @Override public void accept(Visitor v) {
        v.visit(this);
    }
    @Override public <T> T match(Instruction.Matcher<T> matcher) {
        return matcher.case_Call(this);
    }
    @Override public void match(Instruction.MatcherVoid matcher) {
        matcher.case_Call(this);
    }

    @Override public <T> T match(Assign.Matcher<T> matcher) {
        return matcher.case_Call(this);
    }
    @Override public void match(Assign.MatcherVoid matcher) {
        matcher.case_Call(this);
    }

    @Override public <T> T match(Element.Matcher<T> matcher) {
        return matcher.case_Call(this);
    }
    @Override public void match(Element.MatcherVoid matcher) {
        matcher.case_Call(this);
    }

    public boolean structuralEquals(Element e) {
        if (e instanceof Call) {
            Call o = (Call) e;
            return this.var.structuralEquals(o.getVar())
                && this.function.structuralEquals(o.getFunction())
                && this.arguments.structuralEquals(o.getArguments());
        } else {
            return false;
        }
    }
    /** */
    public String toString() {
        return minillvm.printer.PrettyPrinter.elementToString((Call)this);
    }
}
