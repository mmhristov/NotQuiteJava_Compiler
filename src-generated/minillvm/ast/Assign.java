//generated by abstract-syntax-gen
package minillvm.ast;
import java.util.*;

public interface Assign extends Instruction, Element{
    void setVar(TemporaryVar var);
    TemporaryVar getVar();
    Element getParent();
    <T> T match(Matcher<T> s);
    void match(MatcherVoid s);
    public interface Matcher<T> {
        T case_GetElementPtr(GetElementPtr getElementPtr);
        T case_BinaryOperation(BinaryOperation binaryOperation);
        T case_Load(Load load);
        T case_Alloc(Alloc alloc);
        T case_Alloca(Alloca alloca);
        T case_Bitcast(Bitcast bitcast);
        T case_Call(Call call);
        T case_PhiNode(PhiNode phiNode);
    }

    public interface MatcherVoid {
        void case_GetElementPtr(GetElementPtr getElementPtr);
        void case_BinaryOperation(BinaryOperation binaryOperation);
        void case_Load(Load load);
        void case_Alloc(Alloc alloc);
        void case_Alloca(Alloca alloca);
        void case_Bitcast(Bitcast bitcast);
        void case_Call(Call call);
        void case_PhiNode(PhiNode phiNode);
    }

    Assign copy();
    Assign copyWithRefs();
    /** */
    public abstract String toString();
}
