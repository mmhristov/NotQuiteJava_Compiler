/* The following code was generated by JFlex 1.6.1 */

package notquitejava.syntax;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import static notquitejava.syntax.NotQuiteJavaParserSym.*;
import notquitejava.syntax.NotQuiteJavaParserSym;
import java.io.Reader;
import java.util.function.Consumer;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/marian.hristov/Uni/Compiler/hristov/src/main/java/frontend/notquitejava.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\54\4\0"+
    "\1\55\1\0\1\46\1\47\1\11\1\56\1\52\1\57\1\50\1\10"+
    "\1\4\11\5\1\0\1\51\1\60\1\53\3\0\32\6\1\44\1\0"+
    "\1\45\1\0\1\7\1\0\1\12\1\13\1\17\1\30\1\24\1\25"+
    "\1\34\1\27\1\22\1\6\1\33\1\31\1\40\1\21\1\20\1\32"+
    "\1\6\1\16\1\14\1\15\1\23\1\37\1\26\1\41\1\35\1\36"+
    "\1\42\1\0\1\43\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\1\4\1\5\1\6\20\4"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\1\1\22\1\23\1\24\1\25"+
    "\1\0\25\4\1\26\11\4\1\27\10\4\2\0\1\30"+
    "\1\31\1\32\2\25\1\0\15\4\1\33\12\4\1\34"+
    "\1\4\1\35\5\4\1\36\16\4\2\0\4\4\1\37"+
    "\7\4\1\40\1\4\1\41\1\4\1\42\3\4\1\43"+
    "\2\4\1\44\4\4\1\45\1\46\7\4\1\47\5\4"+
    "\1\50\1\51\1\4\1\0\1\30\1\0\2\4\1\52"+
    "\3\4\1\53\1\4\1\54\2\4\1\55\1\4\1\56"+
    "\1\57\1\4\1\60\6\4\1\61\1\62\1\63\1\64"+
    "\10\4\1\0\1\4\1\65\1\4\1\66\1\4\1\67"+
    "\2\4\1\70\1\71\1\4\1\72\2\4\1\73\3\4"+
    "\1\74\1\4\1\75\3\4\1\76\1\4\3\0\1\30"+
    "\1\4\1\77\7\4\1\100\1\101\1\102\1\103\1\4"+
    "\1\104\1\4\1\0\1\30\1\105\1\106\2\4\1\107"+
    "\4\4\1\110\1\0\1\4\1\111\1\4\1\112\1\4"+
    "\1\113\1\4\1\114\1\115\1\4\1\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\61\0\61\0\223\0\304\0\365"+
    "\0\61\0\u0126\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c"+
    "\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4"+
    "\0\u0405\0\61\0\61\0\u0436\0\61\0\61\0\61\0\61"+
    "\0\61\0\61\0\u0467\0\61\0\u0498\0\61\0\61\0\61"+
    "\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620"+
    "\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8"+
    "\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\304"+
    "\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87"+
    "\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f"+
    "\0\u0c40\0\u0c71\0\u0436\0\u0ca2\0\61\0\61\0\61\0\u0cd3"+
    "\0\61\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\304"+
    "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109"+
    "\0\u113a\0\u116b\0\304\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260"+
    "\0\u1291\0\u12c2\0\304\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7"+
    "\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f"+
    "\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\304"+
    "\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\304"+
    "\0\u181e\0\304\0\u184f\0\304\0\u1880\0\u18b1\0\u18e2\0\304"+
    "\0\u1913\0\u1944\0\304\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\304"+
    "\0\304\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f"+
    "\0\304\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\304\0\304"+
    "\0\u1c85\0\u1cb6\0\u15a1\0\u1ce7\0\u1d18\0\u1d49\0\304\0\u1d7a"+
    "\0\u1dab\0\u1ddc\0\304\0\u1e0d\0\304\0\u1e3e\0\u1e6f\0\u1ea0"+
    "\0\u1ed1\0\304\0\304\0\u1f02\0\304\0\u1f33\0\u1f64\0\u1f95"+
    "\0\u1fc6\0\u1ff7\0\u2028\0\304\0\u2059\0\304\0\304\0\u208a"+
    "\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212"+
    "\0\u2243\0\304\0\u2274\0\304\0\u22a5\0\304\0\u22d6\0\u2307"+
    "\0\304\0\304\0\u2338\0\304\0\u2369\0\u239a\0\304\0\u23cb"+
    "\0\u23fc\0\u242d\0\304\0\u245e\0\304\0\u248f\0\u24c0\0\u24f1"+
    "\0\304\0\u2522\0\u2553\0\u2584\0\u25b5\0\u2212\0\u25e6\0\304"+
    "\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d\0\304"+
    "\0\304\0\304\0\304\0\u276e\0\304\0\u279f\0\u27d0\0\u15d2"+
    "\0\304\0\304\0\u2801\0\u2832\0\304\0\u2863\0\u2894\0\u28c5"+
    "\0\u28f6\0\304\0\u2927\0\u2958\0\304\0\u2989\0\304\0\u29ba"+
    "\0\304\0\u29eb\0\304\0\304\0\u2a1c\0\304";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\7"+
    "\1\20\1\21\1\7\1\22\1\23\1\24\1\7\1\25"+
    "\1\26\1\27\1\7\1\30\2\7\1\31\2\7\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\63\0\1\4"+
    "\62\0\2\6\57\0\4\7\2\0\30\7\27\0\1\51"+
    "\1\52\53\0\4\7\2\0\1\7\1\53\1\54\25\7"+
    "\23\0\4\7\2\0\4\7\1\55\1\7\1\56\14\7"+
    "\1\57\4\7\23\0\4\7\2\0\3\7\1\60\5\7"+
    "\1\61\2\7\1\62\1\63\5\7\1\64\4\7\23\0"+
    "\4\7\2\0\4\7\1\65\10\7\1\66\12\7\23\0"+
    "\4\7\2\0\12\7\1\67\15\7\23\0\4\7\2\0"+
    "\1\70\5\7\1\71\6\7\1\72\1\7\1\73\10\7"+
    "\23\0\4\7\2\0\1\74\10\7\1\75\1\76\15\7"+
    "\23\0\4\7\2\0\7\7\1\77\3\7\1\100\12\7"+
    "\1\101\1\7\23\0\4\7\2\0\7\7\1\102\7\7"+
    "\1\103\7\7\1\104\23\0\4\7\2\0\1\105\5\7"+
    "\1\106\1\7\1\107\6\7\1\110\10\7\23\0\4\7"+
    "\2\0\15\7\1\111\12\7\23\0\4\7\2\0\6\7"+
    "\1\112\3\7\1\113\15\7\23\0\4\7\2\0\6\7"+
    "\1\114\3\7\1\115\15\7\23\0\4\7\2\0\1\116"+
    "\3\7\1\117\4\7\1\120\16\7\23\0\4\7\2\0"+
    "\6\7\1\121\21\7\23\0\4\7\2\0\6\7\1\122"+
    "\21\7\20\0\3\123\4\0\1\124\34\0\1\125\66\0"+
    "\1\126\62\0\1\127\3\0\1\51\1\130\1\131\56\51"+
    "\11\52\1\132\47\52\4\0\4\7\2\0\2\7\1\133"+
    "\25\7\23\0\4\7\2\0\2\7\1\134\25\7\23\0"+
    "\4\7\2\0\12\7\1\135\15\7\23\0\4\7\2\0"+
    "\6\7\1\136\21\7\23\0\4\7\2\0\3\7\1\137"+
    "\24\7\23\0\4\7\2\0\1\140\3\7\1\141\23\7"+
    "\23\0\4\7\2\0\20\7\1\142\7\7\23\0\4\7"+
    "\2\0\10\7\1\143\17\7\23\0\4\7\2\0\6\7"+
    "\1\144\21\7\23\0\4\7\2\0\7\7\1\145\20\7"+
    "\23\0\4\7\2\0\1\146\10\7\1\147\11\7\1\150"+
    "\4\7\23\0\4\7\2\0\4\7\1\151\3\7\1\152"+
    "\17\7\23\0\4\7\2\0\3\7\1\153\24\7\23\0"+
    "\4\7\2\0\2\7\1\154\1\155\24\7\23\0\4\7"+
    "\2\0\7\7\1\156\20\7\23\0\4\7\2\0\1\157"+
    "\27\7\23\0\4\7\2\0\1\160\27\7\23\0\4\7"+
    "\2\0\3\7\1\161\24\7\23\0\4\7\2\0\17\7"+
    "\1\162\10\7\23\0\4\7\2\0\14\7\1\163\13\7"+
    "\23\0\4\7\2\0\2\7\1\164\1\165\24\7\23\0"+
    "\4\7\2\0\20\7\1\166\7\7\23\0\4\7\2\0"+
    "\11\7\1\167\16\7\23\0\4\7\2\0\2\7\1\170"+
    "\25\7\23\0\4\7\2\0\3\7\1\171\24\7\23\0"+
    "\4\7\2\0\17\7\1\172\10\7\23\0\4\7\2\0"+
    "\4\7\1\173\23\7\23\0\4\7\2\0\7\7\1\174"+
    "\20\7\23\0\4\7\2\0\6\7\1\175\21\7\23\0"+
    "\4\7\2\0\10\7\1\176\17\7\23\0\4\7\2\0"+
    "\11\7\1\177\16\7\23\0\4\7\2\0\13\7\1\200"+
    "\14\7\23\0\4\7\2\0\7\7\1\201\20\7\23\0"+
    "\4\7\2\0\7\7\1\202\20\7\23\0\4\7\2\0"+
    "\5\7\1\203\22\7\23\0\4\7\2\0\6\7\1\204"+
    "\1\7\1\205\17\7\23\0\4\7\2\0\1\7\1\206"+
    "\26\7\23\0\4\7\2\0\3\7\1\207\24\7\23\0"+
    "\4\7\2\0\10\7\1\210\6\7\1\211\10\7\27\0"+
    "\1\212\1\213\51\0\1\131\56\0\10\52\1\131\1\132"+
    "\47\52\4\0\4\7\2\0\3\7\1\214\24\7\23\0"+
    "\4\7\2\0\12\7\1\215\15\7\23\0\4\7\2\0"+
    "\1\216\27\7\23\0\4\7\2\0\17\7\1\217\10\7"+
    "\23\0\4\7\2\0\12\7\1\220\15\7\23\0\4\7"+
    "\2\0\3\7\1\221\24\7\23\0\4\7\2\0\10\7"+
    "\1\222\17\7\23\0\4\7\2\0\12\7\1\223\15\7"+
    "\23\0\4\7\2\0\3\7\1\224\24\7\23\0\4\7"+
    "\2\0\4\7\1\225\23\7\23\0\4\7\2\0\5\7"+
    "\1\226\22\7\23\0\4\7\2\0\7\7\1\227\20\7"+
    "\23\0\4\7\2\0\12\7\1\230\15\7\23\0\4\7"+
    "\2\0\6\7\1\231\21\7\23\0\4\7\2\0\2\7"+
    "\1\232\25\7\23\0\4\7\2\0\11\7\1\233\16\7"+
    "\23\0\4\7\2\0\12\7\1\234\15\7\23\0\4\7"+
    "\2\0\5\7\1\235\22\7\23\0\4\7\2\0\2\7"+
    "\1\236\1\237\24\7\23\0\4\7\2\0\4\7\1\240"+
    "\23\7\23\0\4\7\2\0\2\7\1\241\25\7\23\0"+
    "\4\7\2\0\10\7\1\242\17\7\23\0\4\7\2\0"+
    "\17\7\1\243\10\7\23\0\4\7\2\0\3\7\1\244"+
    "\24\7\23\0\4\7\2\0\12\7\1\245\15\7\23\0"+
    "\4\7\2\0\6\7\1\246\10\7\1\247\10\7\23\0"+
    "\4\7\2\0\26\7\1\250\1\7\23\0\4\7\2\0"+
    "\12\7\1\251\15\7\23\0\4\7\2\0\12\7\1\252"+
    "\15\7\23\0\4\7\2\0\2\7\1\253\25\7\23\0"+
    "\4\7\2\0\1\254\27\7\23\0\4\7\2\0\1\255"+
    "\27\7\23\0\4\7\2\0\17\7\1\256\10\7\23\0"+
    "\4\7\2\0\1\7\1\257\26\7\23\0\4\7\2\0"+
    "\1\260\27\7\23\0\4\7\2\0\22\7\1\261\5\7"+
    "\23\0\4\7\2\0\22\7\1\262\5\7\23\0\4\7"+
    "\2\0\21\7\1\263\6\7\23\0\4\7\2\0\3\7"+
    "\1\264\24\7\23\0\4\7\2\0\25\7\1\265\2\7"+
    "\23\0\4\7\2\0\17\7\1\266\10\7\23\0\4\7"+
    "\2\0\6\7\1\267\21\7\23\0\4\7\2\0\16\7"+
    "\1\270\11\7\23\0\4\7\2\0\1\271\27\7\17\0"+
    "\1\212\2\123\5\212\1\272\34\212\1\273\13\212\11\213"+
    "\1\274\47\213\4\0\4\7\2\0\4\7\1\275\23\7"+
    "\23\0\4\7\2\0\4\7\1\276\23\7\23\0\4\7"+
    "\2\0\21\7\1\277\6\7\23\0\4\7\2\0\12\7"+
    "\1\300\15\7\23\0\4\7\2\0\10\7\1\301\17\7"+
    "\23\0\4\7\2\0\5\7\1\302\22\7\23\0\4\7"+
    "\2\0\4\7\1\303\23\7\23\0\4\7\2\0\5\7"+
    "\1\304\22\7\23\0\4\7\2\0\3\7\1\305\24\7"+
    "\23\0\4\7\2\0\15\7\1\306\12\7\23\0\4\7"+
    "\2\0\2\7\1\307\25\7\23\0\4\7\2\0\14\7"+
    "\1\310\13\7\23\0\4\7\2\0\4\7\1\311\23\7"+
    "\23\0\4\7\2\0\15\7\1\312\12\7\23\0\4\7"+
    "\2\0\3\7\1\313\24\7\23\0\4\7\2\0\10\7"+
    "\1\314\17\7\23\0\4\7\2\0\2\7\1\315\25\7"+
    "\23\0\4\7\2\0\25\7\1\316\2\7\23\0\4\7"+
    "\2\0\1\317\27\7\23\0\4\7\2\0\4\7\1\320"+
    "\23\7\23\0\4\7\2\0\4\7\1\321\23\7\23\0"+
    "\4\7\2\0\12\7\1\322\15\7\23\0\4\7\2\0"+
    "\7\7\1\323\20\7\23\0\4\7\2\0\12\7\1\324"+
    "\15\7\23\0\4\7\2\0\17\7\1\325\10\7\23\0"+
    "\4\7\2\0\3\7\1\326\24\7\23\0\4\7\2\0"+
    "\12\7\1\327\15\7\23\0\4\7\2\0\17\7\1\330"+
    "\10\7\23\0\4\7\2\0\11\7\1\331\16\7\23\0"+
    "\4\7\2\0\3\7\1\332\24\7\23\0\4\7\2\0"+
    "\1\333\27\7\23\0\4\7\2\0\12\7\1\334\15\7"+
    "\23\0\4\7\2\0\1\335\27\7\23\0\4\7\2\0"+
    "\10\7\1\336\17\7\23\0\4\7\2\0\3\7\1\337"+
    "\24\7\17\0\1\212\2\123\5\212\1\272\1\340\33\212"+
    "\1\273\13\212\10\213\1\123\1\274\47\213\4\0\4\7"+
    "\2\0\1\341\27\7\23\0\4\7\2\0\3\7\1\342"+
    "\24\7\23\0\4\7\2\0\1\343\27\7\23\0\4\7"+
    "\2\0\5\7\1\344\22\7\23\0\4\7\2\0\3\7"+
    "\1\345\24\7\23\0\4\7\2\0\15\7\1\346\12\7"+
    "\23\0\4\7\2\0\4\7\1\347\23\7\23\0\4\7"+
    "\2\0\10\7\1\350\17\7\23\0\4\7\2\0\2\7"+
    "\1\351\25\7\23\0\4\7\2\0\7\7\1\352\20\7"+
    "\23\0\4\7\2\0\7\7\1\353\20\7\23\0\4\7"+
    "\2\0\12\7\1\354\15\7\23\0\4\7\2\0\7\7"+
    "\1\355\20\7\23\0\4\7\2\0\13\7\1\356\14\7"+
    "\23\0\4\7\2\0\3\7\1\357\24\7\23\0\4\7"+
    "\2\0\26\7\1\360\1\7\23\0\4\7\2\0\16\7"+
    "\1\361\11\7\23\0\4\7\2\0\17\7\1\362\10\7"+
    "\23\0\4\7\2\0\12\7\1\363\15\7\23\0\4\7"+
    "\2\0\17\7\1\364\10\7\23\0\4\7\2\0\15\7"+
    "\1\365\12\7\23\0\4\7\2\0\22\7\1\366\5\7"+
    "\23\0\4\7\2\0\5\7\1\367\22\7\23\0\4\7"+
    "\2\0\3\7\1\370\24\7\23\0\4\7\2\0\5\7"+
    "\1\371\22\7\23\0\4\7\2\0\10\7\1\372\17\7"+
    "\17\0\1\340\2\373\5\340\1\374\1\375\33\340\1\376"+
    "\13\340\4\0\4\7\2\0\5\7\1\377\22\7\23\0"+
    "\4\7\2\0\7\7\1\u0100\20\7\23\0\4\7\2\0"+
    "\13\7\1\u0101\14\7\23\0\4\7\2\0\6\7\1\u0102"+
    "\21\7\23\0\4\7\2\0\12\7\1\u0103\15\7\23\0"+
    "\4\7\2\0\11\7\1\u0104\16\7\23\0\4\7\2\0"+
    "\5\7\1\u0105\22\7\23\0\4\7\2\0\1\u0106\27\7"+
    "\23\0\4\7\2\0\12\7\1\u0107\15\7\23\0\4\7"+
    "\2\0\2\7\1\u0108\25\7\23\0\4\7\2\0\23\7"+
    "\1\u0109\4\7\23\0\4\7\2\0\3\7\1\u010a\24\7"+
    "\23\0\4\7\2\0\12\7\1\u010b\15\7\23\0\4\7"+
    "\2\0\3\7\1\u010c\24\7\23\0\4\7\2\0\12\7"+
    "\1\u010d\15\7\23\0\4\7\2\0\17\7\1\u010e\10\7"+
    "\17\0\1\213\3\373\4\213\1\u010f\1\274\33\213\1\u0110"+
    "\13\213\1\340\2\373\5\340\1\374\34\340\1\376\14\340"+
    "\2\373\5\340\1\272\1\375\33\340\1\376\13\340\4\0"+
    "\4\7\2\0\3\7\1\u0111\24\7\23\0\4\7\2\0"+
    "\20\7\1\u0112\7\7\23\0\4\7\2\0\7\7\1\u0113"+
    "\20\7\23\0\4\7\2\0\7\7\1\u0114\20\7\23\0"+
    "\4\7\2\0\12\7\1\u0115\15\7\23\0\4\7\2\0"+
    "\12\7\1\u0116\15\7\23\0\4\7\2\0\5\7\1\u0117"+
    "\22\7\23\0\4\7\2\0\7\7\1\u0118\20\7\23\0"+
    "\4\7\2\0\12\7\1\u0119\15\7\23\0\4\7\2\0"+
    "\12\7\1\u011a\15\7\17\0\10\213\1\340\1\u011b\47\213"+
    "\4\0\4\7\2\0\10\7\1\u011c\17\7\23\0\4\7"+
    "\2\0\3\7\1\u011d\24\7\23\0\4\7\2\0\6\7"+
    "\1\u011e\21\7\23\0\4\7\2\0\12\7\1\u011f\15\7"+
    "\23\0\4\7\2\0\3\7\1\u0120\24\7\23\0\4\7"+
    "\2\0\16\7\1\u0121\11\7\17\0\10\213\1\373\1\274"+
    "\47\213\4\0\4\7\2\0\24\7\1\u0122\3\7\23\0"+
    "\4\7\2\0\13\7\1\u0123\14\7\23\0\4\7\2\0"+
    "\2\7\1\u0124\25\7\23\0\4\7\2\0\12\7\1\u0125"+
    "\15\7\23\0\4\7\2\0\16\7\1\u0126\11\7\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10829];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\3\1\1\11\20\1\2\11"+
    "\1\1\6\11\1\1\1\11\1\1\3\11\1\1\1\0"+
    "\50\1\2\0\3\11\1\1\1\11\1\0\57\1\2\0"+
    "\56\1\1\0\1\1\1\0\43\1\1\0\32\1\3\0"+
    "\21\1\1\0\13\1\1\0\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private ComplexSymbolFactory symbolFactory;

    public Lexer(ComplexSymbolFactory symbolFactory, Reader input){
	    this(input);
        this.symbolFactory = symbolFactory;
    }

    private Symbol symbol(int code){
        String name = NotQuiteJavaParserSym.terminalNames[code];
        Location left = new Location(yyline+1,yycolumn+1);
        Location right = new Location(yyline+1,yycolumn+1+yylength());
	    return symbolFactory.newSymbol(name, code, left, right);
    }
    
    private Symbol symbol(int code, String lexem){
        String name = NotQuiteJavaParserSym.terminalNames[code];
        Location left = new Location(yyline+1,yycolumn+1);
        Location right = new Location(yyline+1,yycolumn+1+yylength());
	    return symbolFactory.newSymbol(name, code, left, right, lexem);	   
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(INVALID_TOKEN, yytext());
            }
          case 79: break;
          case 2: 
            { /* skip whitespace */
            }
          case 80: break;
          case 3: 
            { return symbol(NUMBER, yytext());
            }
          case 81: break;
          case 4: 
            { return symbol(ID, yytext());
            }
          case 82: break;
          case 5: 
            { return symbol(DIV);
            }
          case 83: break;
          case 6: 
            { return symbol(TIMES);
            }
          case 84: break;
          case 7: 
            { return symbol(LBRACE);
            }
          case 85: break;
          case 8: 
            { return symbol(RBRACE);
            }
          case 86: break;
          case 9: 
            { return symbol(LBRACKET);
            }
          case 87: break;
          case 10: 
            { return symbol(RBRACKET);
            }
          case 88: break;
          case 11: 
            { return symbol(LPAREN);
            }
          case 89: break;
          case 12: 
            { return symbol(RPAREN);
            }
          case 90: break;
          case 13: 
            { return symbol(DOT);
            }
          case 91: break;
          case 14: 
            { return symbol(SEMI);
            }
          case 92: break;
          case 15: 
            { return symbol(COMMA);
            }
          case 93: break;
          case 16: 
            { return symbol(EQ);
            }
          case 94: break;
          case 17: 
            { return symbol(NEG);
            }
          case 95: break;
          case 18: 
            { return symbol(PLUS);
            }
          case 96: break;
          case 19: 
            { return symbol(MINUS);
            }
          case 97: break;
          case 20: 
            { return symbol(LESS);
            }
          case 98: break;
          case 21: 
            { /* comment */
            }
          case 99: break;
          case 22: 
            { return symbol(IF);
            }
          case 100: break;
          case 23: 
            { return symbol(DO);
            }
          case 101: break;
          case 24: 
            { return symbol(LRBRACKET);
            }
          case 102: break;
          case 25: 
            { return symbol(EQUALS);
            }
          case 103: break;
          case 26: 
            { return symbol(AND);
            }
          case 104: break;
          case 27: 
            { return symbol(TRY);
            }
          case 105: break;
          case 28: 
            { return symbol(NEW);
            }
          case 106: break;
          case 29: 
            { return symbol(INT);
            }
          case 107: break;
          case 30: 
            { return symbol(FOR);
            }
          case 108: break;
          case 31: 
            { return symbol(BYTE);
            }
          case 109: break;
          case 32: 
            { return symbol(TRUE);
            }
          case 110: break;
          case 33: 
            { return symbol(THIS);
            }
          case 111: break;
          case 34: 
            { return symbol(CASE);
            }
          case 112: break;
          case 35: 
            { return symbol(CHAR);
            }
          case 113: break;
          case 36: 
            { return symbol(NULL);
            }
          case 114: break;
          case 37: 
            { return symbol(ENUM);
            }
          case 115: break;
          case 38: 
            { return symbol(ELSE);
            }
          case 116: break;
          case 39: 
            { return symbol(LONG);
            }
          case 117: break;
          case 40: 
            { return symbol(GOTO);
            }
          case 118: break;
          case 41: 
            { return symbol(VOID);
            }
          case 119: break;
          case 42: 
            { return symbol(BREAK);
            }
          case 120: break;
          case 43: 
            { return symbol(SUPER);
            }
          case 121: break;
          case 44: 
            { return symbol(SHORT);
            }
          case 122: break;
          case 45: 
            { return symbol(THROW);
            }
          case 123: break;
          case 46: 
            { return symbol(CATCH);
            }
          case 124: break;
          case 47: 
            { return symbol(CONST);
            }
          case 125: break;
          case 48: 
            { return symbol(CLASS);
            }
          case 126: break;
          case 49: 
            { return symbol(FALSE);
            }
          case 127: break;
          case 50: 
            { return symbol(FINAL);
            }
          case 128: break;
          case 51: 
            { return symbol(FLOAT);
            }
          case 129: break;
          case 52: 
            { return symbol(WHILE);
            }
          case 130: break;
          case 53: 
            { return symbol(ASSERT);
            }
          case 131: break;
          case 54: 
            { return symbol(STATIC);
            }
          case 132: break;
          case 55: 
            { return symbol(SWITCH);
            }
          case 133: break;
          case 56: 
            { return symbol(THROWS);
            }
          case 134: break;
          case 57: 
            { return symbol(RETURN);
            }
          case 135: break;
          case 58: 
            { return symbol(NATIVE);
            }
          case 136: break;
          case 59: 
            { return symbol(IMPORT);
            }
          case 137: break;
          case 60: 
            { return symbol(DOUBLE);
            }
          case 138: break;
          case 61: 
            { return symbol(LENGTH);
            }
          case 139: break;
          case 62: 
            { return symbol(PUBLIC);
            }
          case 140: break;
          case 63: 
            { return symbol(BOOLEAN);
            }
          case 141: break;
          case 64: 
            { return symbol(EXTENDS);
            }
          case 142: break;
          case 65: 
            { return symbol(FINALLY);
            }
          case 143: break;
          case 66: 
            { return symbol(DEFAULT);
            }
          case 144: break;
          case 67: 
            { return symbol(PACKAGE);
            }
          case 145: break;
          case 68: 
            { return symbol(PRIVATE);
            }
          case 146: break;
          case 69: 
            { return symbol(ABSTRACT);
            }
          case 147: break;
          case 70: 
            { return symbol(STRICTFP);
            }
          case 148: break;
          case 71: 
            { return symbol(CONTINUE);
            }
          case 149: break;
          case 72: 
            { return symbol(VOLATILE);
            }
          case 150: break;
          case 73: 
            { return symbol(TRANSIENT);
            }
          case 151: break;
          case 74: 
            { return symbol(INTERFACE);
            }
          case 152: break;
          case 75: 
            { return symbol(PROTECTED);
            }
          case 153: break;
          case 76: 
            { return symbol(INSTANCEOF);
            }
          case 154: break;
          case 77: 
            { return symbol(IMPLEMENTS);
            }
          case 155: break;
          case 78: 
            { return symbol(SYNCHRONIZED);
            }
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
