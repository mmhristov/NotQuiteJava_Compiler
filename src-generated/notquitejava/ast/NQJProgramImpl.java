//generated by abstract-syntax-gen
package notquitejava.ast;
import java.util.*;

@SuppressWarnings({"cast", "unused", "rawtypes"})
class NQJProgramImpl implements NQJProgram{
    NQJProgramImpl(NQJClassDeclList classDecls, NQJFunctionDeclList functionDecls, NQJInterfaceDeclList interfaceDecls) {
        if (classDecls == null)
            throw new IllegalArgumentException("Element classDecls must not be null.");
        if (functionDecls == null)
            throw new IllegalArgumentException("Element functionDecls must not be null.");
        if (interfaceDecls == null)
            throw new IllegalArgumentException("Element interfaceDecls must not be null.");
        this.classDecls = classDecls;
        this.functionDecls = functionDecls;
        this.interfaceDecls = interfaceDecls;
        classDecls.setParent(this);
        functionDecls.setParent(this);
        interfaceDecls.setParent(this);
    }

    private NQJElement parent;
    public NQJElement getParent() { return parent; }
    public void setParent(NQJElement parent) {
        if (parent != null && this.parent != null) {
            throw new Error("Cannot change parent of element " + this.getClass().getSimpleName() + ", as it is already used in another tree."
                + "Use the copy method to create a new tree or remove the tree from its old parent or set the parent to null before moving the tree. ");
        }
        this.parent = parent;
    }

    public void replaceBy(NQJElement other) {
        if (parent == null)
            throw new RuntimeException("Node not attached to tree.");
        for (int i=0; i<parent.size(); i++) {
            if (parent.get(i) == this) {
                parent.set(i, other);
                return;
            }
        }
    }

    private NQJClassDeclList classDecls;
    public void setClassDecls(NQJClassDeclList classDecls) {
        if (classDecls == null) throw new IllegalArgumentException();
        this.classDecls.setParent(null);
        classDecls.setParent(this);
        this.classDecls = classDecls;
    } 
    public NQJClassDeclList getClassDecls() { return classDecls; }

    private NQJFunctionDeclList functionDecls;
    public void setFunctionDecls(NQJFunctionDeclList functionDecls) {
        if (functionDecls == null) throw new IllegalArgumentException();
        this.functionDecls.setParent(null);
        functionDecls.setParent(this);
        this.functionDecls = functionDecls;
    } 
    public NQJFunctionDeclList getFunctionDecls() { return functionDecls; }

    private NQJInterfaceDeclList interfaceDecls;
    public void setInterfaceDecls(NQJInterfaceDeclList interfaceDecls) {
        if (interfaceDecls == null) throw new IllegalArgumentException();
        this.interfaceDecls.setParent(null);
        interfaceDecls.setParent(this);
        this.interfaceDecls = interfaceDecls;
    } 
    public NQJInterfaceDeclList getInterfaceDecls() { return interfaceDecls; }

    public NQJElement get(int i) {
        switch (i) {
            case 0: return classDecls;
            case 1: return functionDecls;
            case 2: return interfaceDecls;
            default: throw new IllegalArgumentException("Index out of range: " + i);
        }
    }
    public NQJElement set(int i, NQJElement newElem) {
        NQJElement oldElem;
        switch (i) {
            case 0: oldElem = classDecls; setClassDecls((NQJClassDeclList) newElem); return oldElem;
            case 1: oldElem = functionDecls; setFunctionDecls((NQJFunctionDeclList) newElem); return oldElem;
            case 2: oldElem = interfaceDecls; setInterfaceDecls((NQJInterfaceDeclList) newElem); return oldElem;
            default: throw new IllegalArgumentException("Index out of range: " + i);
        }
    }

    @Override
    public void forEachElement(java.util.function.Consumer<? super NQJElement> action) {
        action.accept(this.classDecls);
        action.accept(this.functionDecls);
        action.accept(this.interfaceDecls);
    }
    public int size() {
        return 3;
    }
    @Override public NQJProgram copy() {
        NQJProgram result = new NQJProgramImpl((NQJClassDeclList) this.classDecls.copy(), (NQJFunctionDeclList) this.functionDecls.copy(), (NQJInterfaceDeclList) this.interfaceDecls.copy());
result.setSourcePosition(getSourcePosition());
        return result;
    }

    @Override public NQJProgram copyWithRefs() {
        NQJProgram res = copy();
        return res;
    }

    @Override public void clearAttributes() {
        classDecls.clearAttributes();
        functionDecls.clearAttributes();
        interfaceDecls.clearAttributes();
        clearAttributesLocal();
    }
    @Override public void clearAttributesLocal() {
    }
    @Override public void accept(Visitor v) {
        v.visit(this);
    }
    @Override public <T> T match(NQJElement.Matcher<T> matcher) {
        return matcher.case_Program(this);
    }
    @Override public void match(NQJElement.MatcherVoid matcher) {
        matcher.case_Program(this);
    }

    @Override public String toString() {
        return "Program(" + classDecls + ", " +functionDecls + ", " +interfaceDecls+")";
    }
    public boolean structuralEquals(NQJElement e) {
        if (e instanceof NQJProgram) {
            NQJProgram o = (NQJProgram) e;
            return this.classDecls.structuralEquals(o.getClassDecls())
                && this.functionDecls.structuralEquals(o.getFunctionDecls())
                && this.interfaceDecls.structuralEquals(o.getInterfaceDecls());
        } else {
            return false;
        }
    }
    private frontend.SourcePosition sourcePosition;
    /** "information about the source code"*/
    public frontend.SourcePosition getSourcePosition() {
        return sourcePosition;
    }
    /** "information about the source code"*/
    public void setSourcePosition(frontend.SourcePosition sourcePosition) {
        this.sourcePosition = sourcePosition;
    }
}
