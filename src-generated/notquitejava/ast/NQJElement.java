//generated by abstract-syntax-gen
package notquitejava.ast;
import java.util.*;

public interface NQJElement {
    NQJElement getParent();
    NQJElement copy();
    NQJElement copyWithRefs();
    int size();
    void clearAttributes();
    void clearAttributesLocal();
    NQJElement get(int i);
    NQJElement set(int i, NQJElement newElement);
    void forEachElement(java.util.function.Consumer<? super NQJElement> action);
    default void trimToSize() {        forEachElement(NQJElement::trimToSize);    }    void setParent(NQJElement parent);
    void replaceBy(NQJElement other);
    boolean structuralEquals(NQJElement elem);
    default List<Integer> pathTo(NQJElement  elem) {
        List<Integer> path = new ArrayList<>();
        while (elem != this) {
            if (elem == null) {
                throw new RuntimeException("Element " + elem + " is not a parent of " + this);
            }
            NQJElement parent = elem.getParent();
            for (int i = 0; i < parent.size(); i++) {
                if (parent.get(i) == elem) {
                    path.add(i);
                    break;
                }
            }
            elem = parent;
        }
        Collections.reverse(path);
        return path;
    }

    default NQJElement followPath(Iterable<Integer> path) {
        NQJElement elem = this;
        for (Integer i : path) {
            elem = elem.get(i);
        }
        return elem;
    }
    <T> T match(Matcher<T> s);
    void match(MatcherVoid s);
    public interface Matcher<T> {
        T case_ClassDeclList(NQJClassDeclList classDeclList);
        T case_Plus(NQJPlus plus);
        T case_InterfaceDeclList(NQJInterfaceDeclList interfaceDeclList);
        T case_Minus(NQJMinus minus);
        T case_StmtReturn(NQJStmtReturn stmtReturn);
        T case_ExprBinary(NQJExprBinary exprBinary);
        T case_Read(NQJRead read);
        T case_TopLevelDeclList(NQJTopLevelDeclList topLevelDeclList);
        T case_BoolConst(NQJBoolConst boolConst);
        T case_ExprThis(NQJExprThis exprThis);
        T case_TypeArray(NQJTypeArray typeArray);
        T case_StmtWhile(NQJStmtWhile stmtWhile);
        T case_ExtendsClass(NQJExtendsClass extendsClass);
        T case_VarUse(NQJVarUse varUse);
        T case_ExprNull(NQJExprNull exprNull);
        T case_FunctionDeclList(NQJFunctionDeclList functionDeclList);
        T case_And(NQJAnd and);
        T case_ExtendsNothing(NQJExtendsNothing extendsNothing);
        T case_ArrayLength(NQJArrayLength arrayLength);
        T case_ImplementsInterfaces(NQJImplementsInterfaces implementsInterfaces);
        T case_TypeInt(NQJTypeInt typeInt);
        T case_MemberDeclList(NQJMemberDeclList memberDeclList);
        T case_Div(NQJDiv div);
        T case_Program(NQJProgram program);
        T case_Less(NQJLess less);
        T case_TypeInterfaceOrClass(NQJTypeInterfaceOrClass typeInterfaceOrClass);
        T case_ImplementsNothing(NQJImplementsNothing implementsNothing);
        T case_NewArray(NQJNewArray newArray);
        T case_StmtExpr(NQJStmtExpr stmtExpr);
        T case_ClassDecl(NQJClassDecl classDecl);
        T case_FunctionDecl(NQJFunctionDecl functionDecl);
        T case_MethodCall(NQJMethodCall methodCall);
        T case_ExprList(NQJExprList exprList);
        T case_FunctionCall(NQJFunctionCall functionCall);
        T case_Equals(NQJEquals equals);
        T case_StmtIf(NQJStmtIf stmtIf);
        T case_ArrayLookup(NQJArrayLookup arrayLookup);
        T case_FieldAccess(NQJFieldAccess fieldAccess);
        T case_Block(NQJBlock block);
        T case_Number(NQJNumber number);
        T case_Times(NQJTimes times);
        T case_UnaryMinus(NQJUnaryMinus unaryMinus);
        T case_NewObject(NQJNewObject newObject);
        T case_TypeBool(NQJTypeBool typeBool);
        T case_InterfaceDecl(NQJInterfaceDecl interfaceDecl);
        T case_StmtAssign(NQJStmtAssign stmtAssign);
        T case_VarDeclList(NQJVarDeclList varDeclList);
        T case_VarDecl(NQJVarDecl varDecl);
        T case_ExprUnary(NQJExprUnary exprUnary);
        T case_Negate(NQJNegate negate);
    }

    public interface MatcherVoid {
        void case_ClassDeclList(NQJClassDeclList classDeclList);
        void case_Plus(NQJPlus plus);
        void case_InterfaceDeclList(NQJInterfaceDeclList interfaceDeclList);
        void case_Minus(NQJMinus minus);
        void case_StmtReturn(NQJStmtReturn stmtReturn);
        void case_ExprBinary(NQJExprBinary exprBinary);
        void case_Read(NQJRead read);
        void case_TopLevelDeclList(NQJTopLevelDeclList topLevelDeclList);
        void case_BoolConst(NQJBoolConst boolConst);
        void case_ExprThis(NQJExprThis exprThis);
        void case_TypeArray(NQJTypeArray typeArray);
        void case_StmtWhile(NQJStmtWhile stmtWhile);
        void case_ExtendsClass(NQJExtendsClass extendsClass);
        void case_VarUse(NQJVarUse varUse);
        void case_ExprNull(NQJExprNull exprNull);
        void case_FunctionDeclList(NQJFunctionDeclList functionDeclList);
        void case_And(NQJAnd and);
        void case_ExtendsNothing(NQJExtendsNothing extendsNothing);
        void case_ArrayLength(NQJArrayLength arrayLength);
        void case_ImplementsInterfaces(NQJImplementsInterfaces implementsInterfaces);
        void case_TypeInt(NQJTypeInt typeInt);
        void case_MemberDeclList(NQJMemberDeclList memberDeclList);
        void case_Div(NQJDiv div);
        void case_Program(NQJProgram program);
        void case_Less(NQJLess less);
        void case_TypeInterfaceOrClass(NQJTypeInterfaceOrClass typeInterfaceOrClass);
        void case_ImplementsNothing(NQJImplementsNothing implementsNothing);
        void case_NewArray(NQJNewArray newArray);
        void case_StmtExpr(NQJStmtExpr stmtExpr);
        void case_ClassDecl(NQJClassDecl classDecl);
        void case_FunctionDecl(NQJFunctionDecl functionDecl);
        void case_MethodCall(NQJMethodCall methodCall);
        void case_ExprList(NQJExprList exprList);
        void case_FunctionCall(NQJFunctionCall functionCall);
        void case_Equals(NQJEquals equals);
        void case_StmtIf(NQJStmtIf stmtIf);
        void case_ArrayLookup(NQJArrayLookup arrayLookup);
        void case_FieldAccess(NQJFieldAccess fieldAccess);
        void case_Block(NQJBlock block);
        void case_Number(NQJNumber number);
        void case_Times(NQJTimes times);
        void case_UnaryMinus(NQJUnaryMinus unaryMinus);
        void case_NewObject(NQJNewObject newObject);
        void case_TypeBool(NQJTypeBool typeBool);
        void case_InterfaceDecl(NQJInterfaceDecl interfaceDecl);
        void case_StmtAssign(NQJStmtAssign stmtAssign);
        void case_VarDeclList(NQJVarDeclList varDeclList);
        void case_VarDecl(NQJVarDecl varDecl);
        void case_ExprUnary(NQJExprUnary exprUnary);
        void case_Negate(NQJNegate negate);
    }

    public abstract void accept(Visitor v);
    public interface Visitor {
        void visit(NQJProgram program);
        void visit(NQJFunctionDecl functionDecl);
        void visit(NQJClassDecl classDecl);
        void visit(NQJInterfaceDecl interfaceDecl);
        void visit(NQJExtendsNothing extendsNothing);
        void visit(NQJExtendsClass extendsClass);
        void visit(NQJImplementsNothing implementsNothing);
        void visit(NQJImplementsInterfaces implementsInterfaces);
        void visit(NQJVarDecl varDecl);
        void visit(NQJTypeArray typeArray);
        void visit(NQJTypeInt typeInt);
        void visit(NQJTypeBool typeBool);
        void visit(NQJTypeInterfaceOrClass typeInterfaceOrClass);
        void visit(NQJStmtIf stmtIf);
        void visit(NQJStmtWhile stmtWhile);
        void visit(NQJStmtReturn stmtReturn);
        void visit(NQJStmtExpr stmtExpr);
        void visit(NQJStmtAssign stmtAssign);
        void visit(NQJArrayLookup arrayLookup);
        void visit(NQJFieldAccess fieldAccess);
        void visit(NQJVarUse varUse);
        void visit(NQJRead read);
        void visit(NQJExprBinary exprBinary);
        void visit(NQJExprUnary exprUnary);
        void visit(NQJArrayLength arrayLength);
        void visit(NQJMethodCall methodCall);
        void visit(NQJFunctionCall functionCall);
        void visit(NQJBoolConst boolConst);
        void visit(NQJNumber number);
        void visit(NQJExprThis exprThis);
        void visit(NQJExprNull exprNull);
        void visit(NQJNewArray newArray);
        void visit(NQJNewObject newObject);
        void visit(NQJAnd and);
        void visit(NQJPlus plus);
        void visit(NQJMinus minus);
        void visit(NQJTimes times);
        void visit(NQJDiv div);
        void visit(NQJLess less);
        void visit(NQJEquals equals);
        void visit(NQJUnaryMinus unaryMinus);
        void visit(NQJNegate negate);
        void visit(NQJTopLevelDeclList topLevelDeclList);
        void visit(NQJClassDeclList classDeclList);
        void visit(NQJInterfaceDeclList interfaceDeclList);
        void visit(NQJMemberDeclList memberDeclList);
        void visit(NQJVarDeclList varDeclList);
        void visit(NQJFunctionDeclList functionDeclList);
        void visit(NQJBlock block);
        void visit(NQJExprList exprList);
    }
    public static abstract class DefaultVisitor implements Visitor {
        @Override public void visit(NQJProgram program) {
          program.getClassDecls().accept(this);
          program.getFunctionDecls().accept(this);
          program.getInterfaceDecls().accept(this);
     }
        @Override public void visit(NQJFunctionDecl functionDecl) {
          functionDecl.getReturnType().accept(this);
          functionDecl.getFormalParameters().accept(this);
          functionDecl.getMethodBody().accept(this);
     }
        @Override public void visit(NQJClassDecl classDecl) {
          classDecl.getExtended().accept(this);
          classDecl.getImpl().accept(this);
          classDecl.getFields().accept(this);
          classDecl.getMethods().accept(this);
     }
        @Override public void visit(NQJInterfaceDecl interfaceDecl) {
          interfaceDecl.getMethods().accept(this);
     }
        @Override public void visit(NQJExtendsNothing extendsNothing) {
     }
        @Override public void visit(NQJExtendsClass extendsClass) {
     }
        @Override public void visit(NQJImplementsNothing implementsNothing) {
     }
        @Override public void visit(NQJImplementsInterfaces implementsInterfaces) {
     }
        @Override public void visit(NQJVarDecl varDecl) {
          varDecl.getType().accept(this);
     }
        @Override public void visit(NQJTypeArray typeArray) {
          typeArray.getComponentType().accept(this);
          typeArray.getDimension().accept(this);
     }
        @Override public void visit(NQJTypeInt typeInt) {
     }
        @Override public void visit(NQJTypeBool typeBool) {
     }
        @Override public void visit(NQJTypeInterfaceOrClass typeInterfaceOrClass) {
     }
        @Override public void visit(NQJStmtIf stmtIf) {
          stmtIf.getCondition().accept(this);
          stmtIf.getIfTrue().accept(this);
          stmtIf.getIfFalse().accept(this);
     }
        @Override public void visit(NQJStmtWhile stmtWhile) {
          stmtWhile.getCondition().accept(this);
          stmtWhile.getLoopBody().accept(this);
     }
        @Override public void visit(NQJStmtReturn stmtReturn) {
          stmtReturn.getResult().accept(this);
     }
        @Override public void visit(NQJStmtExpr stmtExpr) {
          stmtExpr.getExpr().accept(this);
     }
        @Override public void visit(NQJStmtAssign stmtAssign) {
          stmtAssign.getAddress().accept(this);
          stmtAssign.getValue().accept(this);
     }
        @Override public void visit(NQJArrayLookup arrayLookup) {
          arrayLookup.getArrayExpr().accept(this);
          arrayLookup.getArrayIndex().accept(this);
     }
        @Override public void visit(NQJFieldAccess fieldAccess) {
          fieldAccess.getReceiver().accept(this);
     }
        @Override public void visit(NQJVarUse varUse) {
     }
        @Override public void visit(NQJRead read) {
          read.getAddress().accept(this);
     }
        @Override public void visit(NQJExprBinary exprBinary) {
          exprBinary.getLeft().accept(this);
          exprBinary.getOperator().accept(this);
          exprBinary.getRight().accept(this);
     }
        @Override public void visit(NQJExprUnary exprUnary) {
          exprUnary.getUnaryOperator().accept(this);
          exprUnary.getExpr().accept(this);
     }
        @Override public void visit(NQJArrayLength arrayLength) {
          arrayLength.getArrayExpr().accept(this);
     }
        @Override public void visit(NQJMethodCall methodCall) {
          methodCall.getReceiver().accept(this);
          methodCall.getArguments().accept(this);
     }
        @Override public void visit(NQJFunctionCall functionCall) {
          functionCall.getArguments().accept(this);
     }
        @Override public void visit(NQJBoolConst boolConst) {
     }
        @Override public void visit(NQJNumber number) {
     }
        @Override public void visit(NQJExprThis exprThis) {
     }
        @Override public void visit(NQJExprNull exprNull) {
     }
        @Override public void visit(NQJNewArray newArray) {
          newArray.getBaseType().accept(this);
          newArray.getArraySize().accept(this);
     }
        @Override public void visit(NQJNewObject newObject) {
     }
        @Override public void visit(NQJAnd and) {
     }
        @Override public void visit(NQJPlus plus) {
     }
        @Override public void visit(NQJMinus minus) {
     }
        @Override public void visit(NQJTimes times) {
     }
        @Override public void visit(NQJDiv div) {
     }
        @Override public void visit(NQJLess less) {
     }
        @Override public void visit(NQJEquals equals) {
     }
        @Override public void visit(NQJUnaryMinus unaryMinus) {
     }
        @Override public void visit(NQJNegate negate) {
     }
        @Override public void visit(NQJTopLevelDeclList topLevelDeclList) {
          for (NQJTopLevelDecl i : topLevelDeclList ) {
              i.accept(this);
          }
     }
        @Override public void visit(NQJClassDeclList classDeclList) {
          for (NQJClassDecl i : classDeclList ) {
              i.accept(this);
          }
     }
        @Override public void visit(NQJInterfaceDeclList interfaceDeclList) {
          for (NQJInterfaceDecl i : interfaceDeclList ) {
              i.accept(this);
          }
     }
        @Override public void visit(NQJMemberDeclList memberDeclList) {
          for (NQJMemberDecl i : memberDeclList ) {
              i.accept(this);
          }
     }
        @Override public void visit(NQJVarDeclList varDeclList) {
          for (NQJVarDecl i : varDeclList ) {
              i.accept(this);
          }
     }
        @Override public void visit(NQJFunctionDeclList functionDeclList) {
          for (NQJFunctionDecl i : functionDeclList ) {
              i.accept(this);
          }
     }
        @Override public void visit(NQJBlock block) {
          for (NQJStatement i : block ) {
              i.accept(this);
          }
     }
        @Override public void visit(NQJExprList exprList) {
          for (NQJExpr i : exprList ) {
              i.accept(this);
          }
     }
    }
    /** "information about the source code"*/
    public abstract frontend.SourcePosition getSourcePosition();
    /** "information about the source code"*/
    public abstract void setSourcePosition(frontend.SourcePosition sourcePosition);
}

