//generated by abstract-syntax-gen
package notquitejava.ast;
import java.util.*;

@SuppressWarnings({"cast", "unused", "rawtypes"})
class NQJArrayLookupImpl implements NQJArrayLookup{
    NQJArrayLookupImpl(NQJExpr arrayExpr, NQJExpr arrayIndex) {
        if (arrayExpr == null)
            throw new IllegalArgumentException("Element arrayExpr must not be null.");
        if (arrayIndex == null)
            throw new IllegalArgumentException("Element arrayIndex must not be null.");
        this.arrayExpr = arrayExpr;
        this.arrayIndex = arrayIndex;
        arrayExpr.setParent(this);
        arrayIndex.setParent(this);
    }

    private NQJElement parent;
    public NQJElement getParent() { return parent; }
    public void setParent(NQJElement parent) {
        if (parent != null && this.parent != null) {
            throw new Error("Cannot change parent of element " + this.getClass().getSimpleName() + ", as it is already used in another tree."
                + "Use the copy method to create a new tree or remove the tree from its old parent or set the parent to null before moving the tree. ");
        }
        this.parent = parent;
    }

    public void replaceBy(NQJElement other) {
        if (parent == null)
            throw new RuntimeException("Node not attached to tree.");
        for (int i=0; i<parent.size(); i++) {
            if (parent.get(i) == this) {
                parent.set(i, other);
                return;
            }
        }
    }

    private NQJExpr arrayExpr;
    public void setArrayExpr(NQJExpr arrayExpr) {
        if (arrayExpr == null) throw new IllegalArgumentException();
        this.arrayExpr.setParent(null);
        arrayExpr.setParent(this);
        this.arrayExpr = arrayExpr;
    } 
    public NQJExpr getArrayExpr() { return arrayExpr; }

    private NQJExpr arrayIndex;
    public void setArrayIndex(NQJExpr arrayIndex) {
        if (arrayIndex == null) throw new IllegalArgumentException();
        this.arrayIndex.setParent(null);
        arrayIndex.setParent(this);
        this.arrayIndex = arrayIndex;
    } 
    public NQJExpr getArrayIndex() { return arrayIndex; }

    public NQJElement get(int i) {
        switch (i) {
            case 0: return arrayExpr;
            case 1: return arrayIndex;
            default: throw new IllegalArgumentException("Index out of range: " + i);
        }
    }
    public NQJElement set(int i, NQJElement newElem) {
        NQJElement oldElem;
        switch (i) {
            case 0: oldElem = arrayExpr; setArrayExpr((NQJExpr) newElem); return oldElem;
            case 1: oldElem = arrayIndex; setArrayIndex((NQJExpr) newElem); return oldElem;
            default: throw new IllegalArgumentException("Index out of range: " + i);
        }
    }

    @Override
    public void forEachElement(java.util.function.Consumer<? super NQJElement> action) {
        action.accept(this.arrayExpr);
        action.accept(this.arrayIndex);
    }
    public int size() {
        return 2;
    }
    @Override public NQJArrayLookup copy() {
        NQJArrayLookup result = new NQJArrayLookupImpl((NQJExpr) this.arrayExpr.copy(), (NQJExpr) this.arrayIndex.copy());
result.setSourcePosition(getSourcePosition());
result.setArrayType(getArrayType());
        return result;
    }

    @Override public NQJArrayLookup copyWithRefs() {
        NQJArrayLookup res = copy();
        return res;
    }

    @Override public void clearAttributes() {
        arrayExpr.clearAttributes();
        arrayIndex.clearAttributes();
        clearAttributesLocal();
    }
    @Override public void clearAttributesLocal() {
    }
    @Override public void accept(Visitor v) {
        v.visit(this);
    }
    @Override public <T> T match(NQJElement.Matcher<T> matcher) {
        return matcher.case_ArrayLookup(this);
    }
    @Override public void match(NQJElement.MatcherVoid matcher) {
        matcher.case_ArrayLookup(this);
    }

    @Override public <T> T match(NQJExprL.Matcher<T> matcher) {
        return matcher.case_ArrayLookup(this);
    }
    @Override public void match(NQJExprL.MatcherVoid matcher) {
        matcher.case_ArrayLookup(this);
    }

    @Override public String toString() {
        return "ArrayLookup(" + arrayExpr + ", " +arrayIndex+")";
    }
    public boolean structuralEquals(NQJElement e) {
        if (e instanceof NQJArrayLookup) {
            NQJArrayLookup o = (NQJArrayLookup) e;
            return this.arrayExpr.structuralEquals(o.getArrayExpr())
                && this.arrayIndex.structuralEquals(o.getArrayIndex());
        } else {
            return false;
        }
    }
    private frontend.SourcePosition sourcePosition;
    /** "information about the source code"*/
    public frontend.SourcePosition getSourcePosition() {
        return sourcePosition;
    }
    /** "information about the source code"*/
    public void setSourcePosition(frontend.SourcePosition sourcePosition) {
        this.sourcePosition = sourcePosition;
    }
    private analysis.ArrayType arrayType;
    /** null*/
    public analysis.ArrayType getArrayType() {
        return arrayType;
    }
    /** null*/
    public void setArrayType(analysis.ArrayType arrayType) {
        this.arrayType = arrayType;
    }
}
