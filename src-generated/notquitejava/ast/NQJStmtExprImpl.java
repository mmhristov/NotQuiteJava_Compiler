//generated by abstract-syntax-gen
package notquitejava.ast;
import java.util.*;

@SuppressWarnings({"cast", "unused", "rawtypes"})
class NQJStmtExprImpl implements NQJStmtExpr{
    NQJStmtExprImpl(NQJExpr expr) {
        if (expr == null)
            throw new IllegalArgumentException("Element expr must not be null.");
        this.expr = expr;
        expr.setParent(this);
    }

    private NQJElement parent;
    public NQJElement getParent() { return parent; }
    public void setParent(NQJElement parent) {
        if (parent != null && this.parent != null) {
            throw new Error("Cannot change parent of element " + this.getClass().getSimpleName() + ", as it is already used in another tree."
                + "Use the copy method to create a new tree or remove the tree from its old parent or set the parent to null before moving the tree. ");
        }
        this.parent = parent;
    }

    public void replaceBy(NQJElement other) {
        if (parent == null)
            throw new RuntimeException("Node not attached to tree.");
        for (int i=0; i<parent.size(); i++) {
            if (parent.get(i) == this) {
                parent.set(i, other);
                return;
            }
        }
    }

    private NQJExpr expr;
    public void setExpr(NQJExpr expr) {
        if (expr == null) throw new IllegalArgumentException();
        this.expr.setParent(null);
        expr.setParent(this);
        this.expr = expr;
    } 
    public NQJExpr getExpr() { return expr; }

    public NQJElement get(int i) {
        switch (i) {
            case 0: return expr;
            default: throw new IllegalArgumentException("Index out of range: " + i);
        }
    }
    public NQJElement set(int i, NQJElement newElem) {
        NQJElement oldElem;
        switch (i) {
            case 0: oldElem = expr; setExpr((NQJExpr) newElem); return oldElem;
            default: throw new IllegalArgumentException("Index out of range: " + i);
        }
    }

    @Override
    public void forEachElement(java.util.function.Consumer<? super NQJElement> action) {
        action.accept(this.expr);
    }
    public int size() {
        return 1;
    }
    @Override public NQJStmtExpr copy() {
        NQJStmtExpr result = new NQJStmtExprImpl((NQJExpr) this.expr.copy());
result.setSourcePosition(getSourcePosition());
        return result;
    }

    @Override public NQJStmtExpr copyWithRefs() {
        NQJStmtExpr res = copy();
        return res;
    }

    @Override public void clearAttributes() {
        expr.clearAttributes();
        clearAttributesLocal();
    }
    @Override public void clearAttributesLocal() {
    }
    @Override public void accept(Visitor v) {
        v.visit(this);
    }
    @Override public <T> T match(NQJElement.Matcher<T> matcher) {
        return matcher.case_StmtExpr(this);
    }
    @Override public void match(NQJElement.MatcherVoid matcher) {
        matcher.case_StmtExpr(this);
    }

    @Override public <T> T match(NQJStatement.Matcher<T> matcher) {
        return matcher.case_StmtExpr(this);
    }
    @Override public void match(NQJStatement.MatcherVoid matcher) {
        matcher.case_StmtExpr(this);
    }

    @Override public String toString() {
        return "StmtExpr(" + expr+")";
    }
    public boolean structuralEquals(NQJElement e) {
        if (e instanceof NQJStmtExpr) {
            NQJStmtExpr o = (NQJStmtExpr) e;
            return this.expr.structuralEquals(o.getExpr());
        } else {
            return false;
        }
    }
    private frontend.SourcePosition sourcePosition;
    /** "information about the source code"*/
    public frontend.SourcePosition getSourcePosition() {
        return sourcePosition;
    }
    /** "information about the source code"*/
    public void setSourcePosition(frontend.SourcePosition sourcePosition) {
        this.sourcePosition = sourcePosition;
    }
}
