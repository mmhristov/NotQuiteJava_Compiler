//generated by abstract-syntax-gen
package notquitejava.ast;
import java.util.*;

@SuppressWarnings({"cast", "unused", "rawtypes"})
class NQJExprBinaryImpl implements NQJExprBinary{
    NQJExprBinaryImpl(NQJExpr left, NQJOperator operator, NQJExpr right) {
        if (left == null)
            throw new IllegalArgumentException("Element left must not be null.");
        if (operator == null)
            throw new IllegalArgumentException("Element operator must not be null.");
        if (right == null)
            throw new IllegalArgumentException("Element right must not be null.");
        this.left = left;
        this.operator = operator;
        this.right = right;
        left.setParent(this);
        operator.setParent(this);
        right.setParent(this);
    }

    private NQJElement parent;
    public NQJElement getParent() { return parent; }
    public void setParent(NQJElement parent) {
        if (parent != null && this.parent != null) {
            throw new Error("Cannot change parent of element " + this.getClass().getSimpleName() + ", as it is already used in another tree."
                + "Use the copy method to create a new tree or remove the tree from its old parent or set the parent to null before moving the tree. ");
        }
        this.parent = parent;
    }

    public void replaceBy(NQJElement other) {
        if (parent == null)
            throw new RuntimeException("Node not attached to tree.");
        for (int i=0; i<parent.size(); i++) {
            if (parent.get(i) == this) {
                parent.set(i, other);
                return;
            }
        }
    }

    private NQJExpr left;
    public void setLeft(NQJExpr left) {
        if (left == null) throw new IllegalArgumentException();
        this.left.setParent(null);
        left.setParent(this);
        this.left = left;
    } 
    public NQJExpr getLeft() { return left; }

    private NQJOperator operator;
    public void setOperator(NQJOperator operator) {
        if (operator == null) throw new IllegalArgumentException();
        this.operator.setParent(null);
        operator.setParent(this);
        this.operator = operator;
    } 
    public NQJOperator getOperator() { return operator; }

    private NQJExpr right;
    public void setRight(NQJExpr right) {
        if (right == null) throw new IllegalArgumentException();
        this.right.setParent(null);
        right.setParent(this);
        this.right = right;
    } 
    public NQJExpr getRight() { return right; }

    public NQJElement get(int i) {
        switch (i) {
            case 0: return left;
            case 1: return operator;
            case 2: return right;
            default: throw new IllegalArgumentException("Index out of range: " + i);
        }
    }
    public NQJElement set(int i, NQJElement newElem) {
        NQJElement oldElem;
        switch (i) {
            case 0: oldElem = left; setLeft((NQJExpr) newElem); return oldElem;
            case 1: oldElem = operator; setOperator((NQJOperator) newElem); return oldElem;
            case 2: oldElem = right; setRight((NQJExpr) newElem); return oldElem;
            default: throw new IllegalArgumentException("Index out of range: " + i);
        }
    }

    @Override
    public void forEachElement(java.util.function.Consumer<? super NQJElement> action) {
        action.accept(this.left);
        action.accept(this.operator);
        action.accept(this.right);
    }
    public int size() {
        return 3;
    }
    @Override public NQJExprBinary copy() {
        NQJExprBinary result = new NQJExprBinaryImpl((NQJExpr) this.left.copy(), (NQJOperator) this.operator.copy(), (NQJExpr) this.right.copy());
result.setSourcePosition(getSourcePosition());
        return result;
    }

    @Override public NQJExprBinary copyWithRefs() {
        NQJExprBinary res = copy();
        return res;
    }

    @Override public void clearAttributes() {
        left.clearAttributes();
        operator.clearAttributes();
        right.clearAttributes();
        clearAttributesLocal();
    }
    @Override public void clearAttributesLocal() {
    }
    @Override public void accept(Visitor v) {
        v.visit(this);
    }
    @Override public <T> T match(NQJElement.Matcher<T> matcher) {
        return matcher.case_ExprBinary(this);
    }
    @Override public void match(NQJElement.MatcherVoid matcher) {
        matcher.case_ExprBinary(this);
    }

    @Override public <T> T match(NQJExpr.Matcher<T> matcher) {
        return matcher.case_ExprBinary(this);
    }
    @Override public void match(NQJExpr.MatcherVoid matcher) {
        matcher.case_ExprBinary(this);
    }

    @Override public String toString() {
        return "ExprBinary(" + left + ", " +operator + ", " +right+")";
    }
    public boolean structuralEquals(NQJElement e) {
        if (e instanceof NQJExprBinary) {
            NQJExprBinary o = (NQJExprBinary) e;
            return this.left.structuralEquals(o.getLeft())
                && this.operator.structuralEquals(o.getOperator())
                && this.right.structuralEquals(o.getRight());
        } else {
            return false;
        }
    }
    private frontend.SourcePosition sourcePosition;
    /** "information about the source code"*/
    public frontend.SourcePosition getSourcePosition() {
        return sourcePosition;
    }
    /** "information about the source code"*/
    public void setSourcePosition(frontend.SourcePosition sourcePosition) {
        this.sourcePosition = sourcePosition;
    }
}
