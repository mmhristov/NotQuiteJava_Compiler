//generated by abstract-syntax-gen
package notquitejava.ast;
import java.util.*;

public interface NQJExpr extends NQJElement{
    NQJElement getParent();
    <T> T match(Matcher<T> s);
    void match(MatcherVoid s);
    public interface Matcher<T> {
        T case_FunctionCall(NQJFunctionCall functionCall);
        T case_BoolConst(NQJBoolConst boolConst);
        T case_MethodCall(NQJMethodCall methodCall);
        T case_ArrayLength(NQJArrayLength arrayLength);
        T case_Number(NQJNumber number);
        T case_ExprBinary(NQJExprBinary exprBinary);
        T case_ExprThis(NQJExprThis exprThis);
        T case_ExprUnary(NQJExprUnary exprUnary);
        T case_NewArray(NQJNewArray newArray);
        T case_NewObject(NQJNewObject newObject);
        T case_Read(NQJRead read);
        T case_ExprNull(NQJExprNull exprNull);
    }

    public interface MatcherVoid {
        void case_FunctionCall(NQJFunctionCall functionCall);
        void case_BoolConst(NQJBoolConst boolConst);
        void case_MethodCall(NQJMethodCall methodCall);
        void case_ArrayLength(NQJArrayLength arrayLength);
        void case_Number(NQJNumber number);
        void case_ExprBinary(NQJExprBinary exprBinary);
        void case_ExprThis(NQJExprThis exprThis);
        void case_ExprUnary(NQJExprUnary exprUnary);
        void case_NewArray(NQJNewArray newArray);
        void case_NewObject(NQJNewObject newObject);
        void case_Read(NQJRead read);
        void case_ExprNull(NQJExprNull exprNull);
    }

    NQJExpr copy();
    NQJExpr copyWithRefs();
    /** "information about the source code"*/
    public abstract frontend.SourcePosition getSourcePosition();
    /** "information about the source code"*/
    public abstract void setSourcePosition(frontend.SourcePosition sourcePosition);
}
